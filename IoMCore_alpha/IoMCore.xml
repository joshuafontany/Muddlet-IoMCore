<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>_UI</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Mutes</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Updating Terminal info..</name>
					<script>deleteLine()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Updating Terminal info.. Rows: .* Columns: .*</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Suppress Prompt</name>
					<script>--display(GUI.Mute)
selectCurrentLine()
deleteLine()
disableTrigger("Suppress Prompt")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return isPrompt()</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Chat</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>All Channels</name>
					<script>if GUI.CaptureChat == true then
  --echo("/n"..tostring(table.contains(GUI.Channels, matches[3])))
  if matches[3] ~= Party.Name and table.contains(GUI.Channels, matches[3]) and not table.contains(GUI.CustomChannels, matches[3]) then
  	selectString(matches[2], 1)
  	setBold(true)
  	resetFormat()
  	selectCurrentLine()
  	copy()
  	appendBuffer("ChatAllConsole")
  	deleteLine()
  	if GUI.CurrentChat ~= "BoxChatAll" then
  		flashButtonBox("BoxChatAllIcon", 0.25, 0.5)
  	end
  elseif table.contains(GUI.CustomChannels, matches[3]) then
  	selectString(matches[2], 1)
  	setBold(true)
  	resetFormat()
  	selectCurrentLine()
  	copy()
  	appendBuffer("ChatCustomConsole")
  	deleteLine()
  	if GUI.CurrentChat ~= "BoxChatCustom" then
  		flashButtonBox("BoxChatCustomIcon", 0.25, 0.5)
  	end
  elseif matches[3] == Party.Name then
  	selectString(matches[2], 1)
  	setBold(true)
  	resetFormat()
  	selectCurrentLine()
  	copy()
  	appendBuffer("ChatPartyConsole")
  	deleteLine()
  	if GUI.CurrentChat ~= "BoxChatParty" then
  		flashButtonBox("BoxChatPartyIcon", 0.25, 0.5)
  	end
  end
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(?!--More--|Help topic\?|--- \(\d*-\d*-\d*%\)|\d\d:\d\d:\d\d)(\w*)? ?(?:\(\w+\) )?(?:-\||\[|\(|\{|–\[|–\{|&lt;&lt;?|§–&lt;|–'–,&lt;@ |–\]–– |–\|)(?! )(\w*)(?:\|–| ––\[–| @&gt;,–'–|&gt;–§|&gt;&gt;?|\}–|\]–|\}|\)|\]|\|-): (.*)$</string>
						<string>^(?!--More--|Help topic\?|--- \(\d*-\d*-\d*%\)|\d\d:\d\d:\d\d)(\w*)? ?(?:\(\w+\) )?(?:&lt;–&lt;)(?! )(\w*)(?:&gt;–&gt;): (.*)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Tells</name>
					<script>if GUI.CaptureChat == true then
	selectCurrentLine()
	copy()
	appendBuffer("ChatTellsConsole")
	if GUI.HideTells == true then
		deleteLine()
	end
	if GUI.CurrentChat ~= "BoxChatTells" then
		flashButtonBox("BoxChatTellsIcon", 0.25, 0.5)
	end
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w*) tells you: (.*)$</string>
						<string>^You tell (\w*) : (.*)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Pause Chat Capture</name>
					<script>--[[ turn off chat capture when:
 			1- a chracter's 'finger' info comes up


]]
--cecho("&lt;sky_blue&gt;Pausing chat capture...&lt;reset&gt;")
if GUI.CaptureChat == true then
	GUI.CaptureChat = false
	enableTrigger("Resume Chat Capture")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\#_+\#$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Resume Chat Capture</name>
					<script>--[[ turn on chat capture when:
 			1- a prompt comes up
]]
--cecho("&lt;sky_blue&gt;Resuming chat capture...&lt;reset&gt;")
if GUI.CaptureChat == false then
	GUI.CaptureChat = true
	disableTrigger("Resume Chat Capture")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return isPrompt()</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Footer</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Full Health</name>
					<script>selectString(matches[1], 1)
fg(GUI.colors.bonus)
resetFormat()
flashButtonBox("BoxHealth", 0.25, 0.5)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You feel fully healed.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Full Spell</name>
					<script>selectString(matches[1], 1)
fg(GUI.colors.bonus)
resetFormat()
flashButtonBox("BoxSpell", 0.25, 0.5)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Your body glows with magical energy.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Full Endurance</name>
					<script>selectString(matches[1], 1)
fg(GUI.colors.bonus)
resetFormat()
flashButtonBox("BoxEndurance", 0.25, 0.5)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You feel fully refreshed.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Tabs</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Pause Tab Refreshes</name>
					<script>if GUI.TabRefresh == true then
  cecho("&lt;sky_blue&gt;Pausing tab refresh...&lt;reset&gt;\n")
  killAllTabTimers()
  enableTrigger("Resume Tab Refresh")
  disableTrigger("Pause Tab Refresh")
  GUI.TabRefresh = false
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\[[\w\d\?q]*\]\s*$</string>
						<string>^\[(\d+) of (\d+)\] mail:\s*$</string>
						<string>^Help topic\? \[\?\]:\s*$</string>
						<string>^--More--\(\d+%\) \[\?\]:\s*$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Resume Tab Refresh</name>
					<script>local refresh = false
local npc_matches = {
	"Sisong says",
}

local prompt_matches = {
	"^Help topic%\?",
	"^%[[%w%d%\?]+%]",
	"^%[(%d+) of (%d+)%] mail:",
	"^Please answer Y for yes or N for no:",
	"How much%\? "
}

if GUI.TabRefresh == false then
  if table.contains(npc_matches, matches[2]) then
  	--echo ("npc?")
  	refresh = true
  elseif isPrompt() then
  	--echo ("prompt?")
		selectCurrentLine()
		local prompt = getSelection()
		--display(prompt)
		for i = 1, #prompt_matches do
			local test = prompt_matches[i]
			--display(string.match(prompt, test))
			if string.match(prompt, test) ~= nil then
				return false
			end
		end
  	refresh = true
  end
  if refresh == true then
  	GUI.TabRefresh = true
    on_chat_box_press(GUI.CurrentChat)
    on_content_box_press(GUI.CurrentContent)
    on_menu_box_press(GUI.CurrentMenu)
    disableTrigger("Resume Tab Refresh")
    enableTrigger("Pause Tab Refresh")
  	cecho("&lt;sky_blue&gt;Resuming tab refresh...&lt;reset&gt;\n")
  end
end
deselect()
moveCursorEnd()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(Sisong says), "Well then, off ya go!.*$</string>
						<string>return isPrompt()</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>4</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Character Status</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Mute Mud Data</name>
				<script>selectCurrentLine()
copy()
--appendBuffer("ChatCustomConsole")
deleteLine()</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>return true</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>4</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>doLogin</name>
				<script>loginText = "do "
if Character.RDMPStatus == "ON" then
	loginText = loginText .. "RDMP ON ".. Character.RDMPCode ..";"
	enableTrigger("RDMP Zero")
	enableTrigger("RDMP")
elseif Character.RDMPStatus == "OFF" then
	disableTrigger("RDMP Zero")
	disableTrigger("RDMP")
end
loginText = loginText .. "verbose on;"
if matches[1] ~= "A dark, sucking portal appears. You fall from it!" then
	loginText = loginText .. "remove all;"
end
loginText = loginText .. "x myself;stats;score"
--enableTrigger("Mute Mud Data")
enableTrigger("loginData")
enableTrigger("Character.Score")
send(loginText)</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^You enter Islands of Myth.(?:Welcome to Islands of Myth!)?$</string>
					<string>^A dark, sucking portal appears. You fall from it!$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>loginData</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>2</conditonLineDelta>
				<mStayOpen>50</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^Verbose mode is now on.$</string>
					<string>^(?:=-){5,}$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Login Name Data</name>
					<script>--display(multimatches)
if multimatches[2][2] then
	Character.Name = multimatches[2][2]
	--echo(Character.Name.." true\n")
end
GUI.DataInitialized = Character_io("Load")
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>2</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(?:=-){5,}$</string>
						<string>^(\w+)(?:\s(\w{1,11}))?\sthe(?:\s(\w+)).*$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Login Scars Data</name>
					<script>if matches[2] then
	Character.Scars = tonumber(string.format("%i", matches[2]))
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(?:H|Sh)e has (\d+) scar(?:s)?.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Login Stats Data</name>
					<script>if multimatches[2][1] then
	local statArray = string.split(string.trim(multimatches[2][1]), "   ")
	for index = 1, #statArray do
		local item = statArray[index]
		local itemArray = string.split(item, ": ")
		--echo("Stat: "..itemArray[1].." Value: "..itemArray[2].."\n")
		local name = itemArray[1]
		local value = tonumber(string.format("%i", itemArray[2]))
		if not Character.Stats[name] then Character.Stats[name] = {} end
		Character.Stats[name].Base = value
		Character.Stats[name].Current = value
	end
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>2</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Stats:$</string>
						<string>^\sStr:\s\d+\s+Dex:\s\d+\s+Con:\s\d+\s+Sta:\s\d+\s+Int:\s\d+\s+Wis:\s\d+\s+Cha:\s\d+$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Prompt Test</name>
					<script>--echo("Prompt!")
disableTrigger("Mute Login Data")
disableTrigger("loginData")
if GUI.DataInitialized ~= nil and GUI.DataInitialized ~= false then
	cecho(" &lt;green&gt;sys&lt;DimGrey&gt;:&lt;white&gt; Save Data synced for "..Character.Name.."\n")
	Character_io("Save")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return isPrompt()</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Character.Score</name>
				<script>if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>50</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^,-+.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Name Data</name>
					<script>--[[if matches[2] then
	Character.Name = matches[2]
end]]
if matches[3] then
	Character.Surname = matches[3]
end
if matches[4] then
	Character.Race = matches[4]
end
if matches[5] then
	Character.Title = matches[5]
end
if matches[6] then
	Character.GuildName = matches[6]
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|\s(\w+)(?:\s(\w{1,11}))?\sthe(?:\s(\w+))(?:\s(\w+))?(?:\s*\((\w+)\))?[^\|]*\|$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture Levels</name>
					<script>if matches[2] and matches[3] then
		Character.Level = tonumber(matches[2])
		Character.OpenLevels = tonumber(matches[3])
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|\sLevel\s*:\s*(\d+)\s+Open\sGuild\sLevels\s*:\s*(\d+)\s*\|$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture Exp Explored</name>
					<script>if matches[2] and matches[3] and matches[4] then
		--echo(string.format("%0.0f", string.gsub(matches[2],",", "")))
		Character.Exp.Current = tonumber(string.format("%0f", string.gsub(matches[2],",", "")))
		Character.Explored.MudPercent = string.format("%0.2f", matches[3])
		Character.Explored.NextReward = string.format("%0.2f", matches[4])
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|\sExperience\s*:\s*([\w,]+)\s+Explored\s*:\s*([\w\.]+)%\s*\(([\w\.]+)%\)\s*\|$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture Next Level Rooms</name>
					<script>if matches[2] and matches[3] then
		Character.Exp.NextAdvLevel = tonumber(string.format("%0f", string.gsub(matches[2],",", "")))
		Character.Explored.Rooms = tonumber(string.format("%0f", string.gsub(matches[3],",", "")))
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|\sNext\slevel\s*:\s*([\w,]+)\s+Rooms\sExplored\s*:\s*([\w,]+)\s*\|$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture Guild Level Gold</name>
					<script>if matches[2] and matches[3] then
		--echo(matches[2])
		Character.Exp.NextGuildLevel = tonumber(string.format("%0f", string.gsub(matches[2],",", "")))
		Character.Gold.Current = tonumber(string.format("%0f", string.gsub(matches[3],",", "")))
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|\sGuild\sLevel\s*:\s*([\w,]+)\s+Gold\son\shand\s*:\s*([\w,]+)\s*\|$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture Gold in bank</name>
					<script>if matches[2] then
		Character.Gold.Bank = tonumber(string.format("%0f", string.gsub(matches[2],",", "")))
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|\sTo\sNext\sLevel\s*:\s*[\w,]+\s+Gold\sin\sbank\s*:\s*([\w,]+)\s*\|$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture AC</name>
					<script>if matches[2] and matches[3] and matches[4] and matches[5] then
		Character.Stats.Str.Current = tonumber(matches[2])
		Character.Hp.Current = tonumber(matches[3])
		Character.Hp.Max = tonumber(matches[4])
		local val = matches[5]
		local num = GUI.Lookup.AC[val]
		--echo("AC:"..val.."("..num..")\n")
		Character.AC = tonumber(num)
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|\sStrength\s*:\s*(\d+)\s*\|\sHit\sPoints\s*:\s*(\d+)\s\(\s*(\d+)\)\s\|\sAC\s*:\s*(\w+)\s*\|$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture Size</name>
					<script>if matches[2] and matches[3] and matches[4] and matches[5] then
		Character.Stats.Dex.Current = tonumber(matches[2])
		Character.Sp.Current = tonumber(matches[3])
		Character.Sp.Max = tonumber(matches[4])
		Character.Height = matches[5]
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|\sDexterity\s*:\s*(\d+)\s*\|\sSpell\sPoints\s*:\s*(\d+)\s\(\s*(\d+)\)\s\|\sSize\s*:\s*([\w'"]*)\s*\|$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture Weight</name>
					<script>if matches[2] and matches[3] and matches[4] and matches[5] then
		Character.Stats.Con.Current = tonumber(matches[2])
		Character.Ep.Current = tonumber(matches[3])
		Character.Ep.Max = tonumber(matches[4])
		Character.Weight = tonumber(matches[5])
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|\sConstitution\s*:\s*(\d+)\s*\|\sEndurance\sPts\.\s*:\s*(\d+)\s\(\s*(\d+)\)\s\|\sWeight\s*:\s*(\d+)\slb\s*\|$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture Stealth</name>
					<script>if matches[2] and matches[3] and matches[4] then
		Character.Stats.Sta.Current = tonumber(matches[2])
		Character.Stealth = tonumber(matches[4])
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|\sStamina\s*:\s*(\d+)\s*\|\sHunger\s*:\s*(\w+)\s*\|\sStealth\s*:\s*(\d+)%\s*\|$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture Hiding</name>
					<script>if matches[2] and matches[3] and matches[4] then
		Character.Stats.Int.Current = tonumber(matches[2])
		Character.Wimpy = tonumber(matches[3])
		local val = matches[4]
		local num = GUI.Lookup.Hiding[val]
		Character.Hiding = tonumber(num)
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|\sIntelligence\s*:\s*(\d+)\s*\|\sWimpy\s*:\s*(\d+)%\s*\|\sHiding\s*:\s*(\w+)\s*\|$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture Poisoned</name>
					<script>if matches[2] and matches[3] and matches[4] then
		Character.Stats.Wis.Current = tonumber(matches[2])
		local val = matches[3]
		local num = GUI.Lookup.Growth[val]
		Character.Growth = tonumber(num)
		local pval = matches[4]
		local pnum = GUI.Lookup.Poisoned[pval]
		Character.Poisoned = tonumber(pnum)
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|\sWisdom\s*:\s*(\d+)\s*\|\sGrowth\s*:\s*(\w+)\s*\|\sPoisoned\s*:\s*(\w+)\s*\|$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture TaskPts</name>
					<script>if matches[2] and matches[3] and matches[4] then
		Character.Stats.Cha.Current = tonumber(matches[2])
		local val = string.trim(matches[3])
		local num = GUI.Lookup.Alignment[val]
		Character.Alignment = tonumber(num)
		Character.TaskPoints = tonumber(matches[4])
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|\sCharisma\s*:\s*(\d+)\s*\|\sAlignment\s*:([\w\s\.]+)\|\sTaskPts\.\s*:\s*(\w+)\s*\|$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture Mail</name>
					<script>if matches[2] and matches[3] then
		Character.Mail.New = tonumber(matches[2])
		Character.Mail.Total = tonumber(matches[3])
		enableTrigger("Capture Guilds")
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|[^\|]*\|\sMail\s*:\s*(\d+)\/(\d+)\s*\|$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture Kills</name>
					<script>if matches[2] then
		Character.Kills = tonumber(string.format("%0f", string.gsub(matches[2],",", "")))
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|[^\|]*\|\s*Kills\s*:\s*([\d,]+)\s*\|$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture Guilds</name>
					<script>if matches[2] then
		if string.len(string.trim(matches[2])) == 0 then return end
		local function setGuild(gStr)
			local gArray = string.split(string.gsub(gStr, "%)", ""), " %(")
			if #gArray == 2 then
				local tierArray = {"alpha", "gamma", "bravo", "omicron"}
				for index = 1, #tierArray do
					local tier = tierArray[index]
					local gName = gArray[1]
					if table.contains(GUI.Lookup.Guilds[tier], gName) and tonumber(gArray[2]) then
						Character.Guilds[tier][gName] = gArray[2]
					end
				end
			end
		end		
		
		local lineArray = string.split(string.trim(matches[2]), ", ")
		if #lineArray &gt; 1 then
			for index = 1, #lineArray do
				setGuild(lineArray[index])
			end
		else
			setGuild(lineArray[1])
		end
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|[^-]\s*(?:(?:alpha|gamma|bravo|omicron)\s*:\s*)?([^\|`]*)(?:\||`)(?:.*|)?$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Mute Score Data</name>
					<script>if table.contains(GUI.Mute, "Character.Score") == true then
  selectCurrentLine()
  copy()
  deleteLine()
end

if table.contains(GUI.Mute, "Character.Score") then
	selectCurrentLine()
  deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^,-</string>
						<string>^\|</string>
						<string>^`-</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture Disable</name>
					<script>render_console("CharacterConsole", content_body["CharacterConsole"])
render_progress()
disableTrigger("Character.Score")
disableTrigger("Capture Guilds")
if table.contains(GUI.Mute, "Character.Score") == true then
  selectCurrentLine()
  copy()
  deleteLine()
	table.remove(GUI.Mute, table.index_of(GUI.Mute, "Character.Score"))
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^`-+'$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Character.Stats</name>
				<script>if multimatches[2][1] then
	local statArray = string.split(string.trim(multimatches[2][1]), "   ")
	for index = 1, #statArray do
		local item = statArray[index]
		local itemArray = string.split(item, ": ")
		--echo("Stat: "..itemArray[1].." Value: "..itemArray[2].."\n")
		local name = itemArray[1]
		local value = tonumber(string.format("%i", itemArray[2]))
		Character.Stats[name].Current = value
	end
	render_console("CharacterConsole", content_body["CharacterConsole"])
end
disableTrigger("Character.Stats")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>2</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^Stats:$</string>
					<string>^\sStr:\s\d+\s+Dex:\s\d+\s+Con:\s\d+\s+Sta:\s\d+\s+Int:\s\d+\s+Wis:\s\d+\s+Cha:\s\d+$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Character.ResetStats</name>
				<script>if multimatches[2][1] then
	local statArray = string.split(string.trim(multimatches[2][1]), "   ")
	for index = 1, #statArray do
		local item = statArray[index]
		local itemArray = string.split(item, ": ")
		--echo("Stat: "..itemArray[1].." Value: "..itemArray[2].."\n")
		local name = itemArray[1]
		local value = tonumber(string.format("%i", itemArray[2]))
		Character.Stats[name].Current = value
		Character.Stats[name].Base = value
	end
	render_console("CharacterConsole", content_body["CharacterConsole"])
end
disableTrigger("Character.ResetStats")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>2</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^Stats:$</string>
					<string>^\sStr:\s\d+\s+Dex:\s\d+\s+Con:\s\d+\s+Sta:\s\d+\s+Int:\s\d+\s+Wis:\s\d+\s+Cha:\s\d+$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Character.Exp</name>
				<script>if matches[2] and matches[3] and matches[4] then
	Character.Exp.Current = tonumber(string.format("%0f", string.gsub(matches[2],",", "")))
	Character.Exp.NextAdvLevel = tonumber(string.format("%0f", string.gsub(matches[3],",", "")))
	Character.Gold.Current = tonumber(string.format("%0f", string.gsub(matches[4],",", "")))
	render_console("CharacterConsole", content_body["CharacterConsole"])
	render_progress()
	if table.contains(GUI.Mute, "Character.Exp") then
  	selectCurrentLine()
  	deleteLine()
	end
	if table.contains(GUI.Mute, "Character.Exp") then
    table.remove(GUI.Mute, table.index_of(GUI.Mute, "Character.Exp"))
  end
  disableTrigger("Character.Exp")
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^\sExp:\s([\w,]+)\s*Next\slevel:\s([\w,]+)\s*Money:\s([\w,]+) gold$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Character.Align</name>
				<script>if matches[2] then
	if table.contains(GUI.Mute, "Character.Align") then
  	selectCurrentLine()
  	deleteLine()
    table.remove(GUI.Mute, table.index_of(GUI.Mute, "Character.Align"))
  end
  disableTrigger("Character.Align")
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^You are currently ([\w\s\.]+)$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Character.Eq</name>
				<script>enableTrigger("Eq Header")
</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>1</conditonLineDelta>
				<mStayOpen>30</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^\s{3}-+\s{3}$</string>
					<string>^\s{3}\|\s+([\w\s()]+?)?\s{2,}\|\s{3}$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Eq Header</name>
					<script>	Character.Eq.Weapons = {}
	Character.Eq.Armor = {}
	echo("reset")
	enableTrigger("Get Weapons")
	enableTrigger("Eq Spacer")
	if table.contains(GUI.Mute, "Character.Eq") then
    deleteLine()
  end
	</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\s{3}-+\s{3}$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Get Weapons</name>
					<script>if matches[2] and matches[3] then
	local name = matches[2]
	local slot = matches[3]
	Character.Eq.Weapons[name] = {}
	Character.Eq.Weapons[name]["slot"] = slot
	if table.contains(GUI.Mute, "Character.Eq") then
    deleteLine()
  end
	disableTrigger("Eq Header")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\s{3}\|\s+([\w\s]*)\s\(([\w\s]*)\)\s*\|\s{3}$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Eq Spacer</name>
					<script>if table.contains(GUI.Mute, "Character.Eq") then
  deleteLine()
end
enableTrigger("Get Armor")
enableTrigger("End Eq")
disableTrigger("Get Weapons")
disableTrigger("Eq Spacer")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\s{3}\|\s+\|\s{3}$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Get Armor</name>
					<script>if matches[2] and matches[3] then
	local name = matches[2]
	Character.Eq.Armor[name] = {
		worn = false,
		kept = false,
		slot = ""
	}
	local tagString = string.trim(matches[3])
	if string.match(tagString, "%(([%w%s]+)%)") ~= nil then
		for tag in string.gmatch(tagString, "%(([%w%s]+)%)") do
			if 
				tag == "worn" then Character.Eq.Armor[name]["worn"] = true 
  		elseif
				tag == "kept" then Character.Eq.Armor[name]["kept"] = true
			else
				local item = Character.Eq.Armor[name]
				item.slot = tag
			end
		end
	end

	if table.contains(GUI.Mute, "Character.Eq") then
    deleteLine()
  end
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\s{3}\|\s+([\w\s]+)\s([\w\s()]+)\|\s{3}$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>End Eq</name>
					<script>if table.contains(GUI.Mute, "Character.Eq") then
    table.remove(GUI.Mute, table.index_of(GUI.Mute, "Character.Eq"))
end
disableTrigger("Get Armor")
disableTrigger("End Eq")
echo("disable")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>1</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\s{3}\|\s+([\w\s()]+?)?\s{2,}\|\s{3}$</string>
						<string>^\s{3}-+\s{3}$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Character.InventoryCapacity</name>
				<script>if matches[2] and matches[3] then
	Character.InventoryWeight = tonumber(matches[2])
	Character.InventoryCapacity = tonumber(matches[3])
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^Weight\s\(in\slbs\):\sYou\[\d+\]\s\+\sEQ\[(\d+)\]\s=\sTotal\[\d+\],\sCapacity\[(\d+)%\]$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Character.Inventory</name>
				<script>if matches[2] =="Weight (in lbs):" then
	if table.contains(GUI.Mute, "Character.Inventory") then
		selectCurrentLine()
    deleteLine()
  end
	Character.Inventory = {}
	GUI.InvSection = ""
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>50</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^(Weight\s\(in\slbs\):)\sYou\[\d+\]\s\+\sEQ\[\d+\]\s=\sTotal\[\d+\],\sCapacity\[\d+%\]$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Inventory Header</name>
					<script>if matches[2] then
	local section = string.trim(matches[2])
	GUI.InvSection = section
	Character.Inventory[section] = {}
	
	selectString(section, 1)
	local r,g,b = getBgColor()
	echo("bg: "..r..","..g..","..b.." ")
	Character.InventoryHeadersBg[section] = {["r"] = tonumber(r), ["g"] = tonumber(g), ["b"] = tonumber(b)}
	r,g,b = getFgColor()
	echo("fg: "..r..","..g..","..b.."\n")
	Character.InventoryHeadersFg[section] = {["r"] = tonumber(r), ["g"] = tonumber(g), ["b"] = tonumber(b)}

	if table.contains(GUI.Mute, "Character.Inventory") then
			selectCurrentLine()
    	deleteLine()
  end
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\s+\[\+\-\+\s([^+]+)\+\-\+\]$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Inventory Item</name>
					<script>if matches[2] and matches[3] then
	local section = GUI.InvSection
	local start, stop = string.find(matches[3], "%(")
	local objName = ""
	if start then
		objName = string.trim(string.cut(string.trim(matches[3]), start-1))
	else
		objName = string.trim(matches[3])
	end
	local obj = {
		name = objName,
		quantity = tonumber(matches[2]),
		["section"] = section,
		kept = not not string.match(matches[3], "kept"),
		worn = not not string.match(matches[3], "worn"),
		wielded = not not string.match(matches[3], "wielded")
	}
	--display(section)
	table.insert(Character.Inventory[section], obj)
	if table.contains(GUI.Mute, "Character.Inventory") then
    selectCurrentLine()
		deleteLine()
  end
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\((\d+)\)\s+(.+)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</Trigger>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Character.Skills</name>
				<script>-- Only triggers if preceeded by 'exp' command.
-- This is to differentiate skills from spells (preceeded by 'align').
enableTrigger("Skills Guild Header")
enableTrigger("Skills Line")
enableTrigger("Skills End")
enableTrigger("Skills End Test")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>1</conditonLineDelta>
				<mStayOpen>100</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^\sExp:\s([\w,]+)\s*Next\slevel:\s([\w,]+)\s*Money:\s([\w,]+) gold$</string>
					<string>^-=-=-\|\s([\w\s]+)\s\|(?:-=)+-$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Skills Guild Header</name>
					<script>if matches[2] then
	GUI.CaptureGuild = string.trim(string.lower(matches[2]))
	if table.contains(Character.Skills, GUI.CaptureGuild) == false then
		Character.Skills[GUI.CaptureGuild] = {}
	end
	if table.contains(GUI.Mute, "Character.Skills") then
    deleteLine()
  end
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^-=-=-\|\s([\w\s]+)\s\|(?:-=)+-$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Skills Line</name>
					<script>if matches[2] and matches[3] then
	local nameA = string.lower(string.trim(matches[2]))
	local percentA = tonumber(matches[3])
	Character.Skills[GUI.CaptureGuild][nameA] = percentA

	if matches[4] and matches[5] then
		local nameB = string.lower(string.trim(matches[4]))
		local percentB = tonumber(matches[5])
		Character.Skills[GUI.CaptureGuild][nameB] = percentB
  end
  
  if table.contains(GUI.Mute, "Character.Skills") then
    deleteLine()
  end

end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\s+([\w\s]+)\s:\s+(\d+)%\s+\|\s*(?:([\w\s]+)\s:\s+(\d+)%\s*)?$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Skills End</name>
					<script>if table.contains(GUI.Mute, "Character.Skills") then
	deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(?:-=)+-$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Skills End Test</name>
					<script>--cecho("\n -- &lt;red&gt;Skills Prompt!&lt;reset&gt;\n")
if table.contains(GUI.Mute, "Character.Skills") then
	deleteLine()
  table.remove(GUI.Mute, table.index_of(GUI.Mute, "Character.Skills"))
end
GUI.CaptureGuild = ""
disableTrigger("Skills Guild Header")
disableTrigger("Skills Line")
disableTrigger("Skills End")
disableTrigger("Character.Skills")
disableTrigger("Skills End Test")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>1</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(?:-=)+-$</string>
						<string>return isPrompt()</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>4</integer>
					</regexCodePropertyList>
				</Trigger>
			</Trigger>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Character.Spells</name>
				<script>-- Only triggers if preceeded by 'align' command.
-- This is to differentiate skills from skills (preceeded by 'exp').

enableTrigger("Spells Guild Header")
enableTrigger("Spells Line")
enableTrigger("Spells End")
enableTrigger("Spells End Test")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>1</conditonLineDelta>
				<mStayOpen>100</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^You are currently ([\w\s\.]+)$</string>
					<string>^-=-=-\|\s([\w\s]+)\s\|(?:-=)+-$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Spells Guild Header</name>
					<script>if matches[2] then
	GUI.CaptureGuild = string.trim(string.lower(matches[2]))
	if table.contains(Character.Spells, GUI.CaptureGuild) == false then
		Character.Spells[GUI.CaptureGuild] = {}
	end
	if table.contains(GUI.Mute, "Character.Spells") then
    deleteLine()
  end
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^-=-=-\|\s([\w\s]+)\s\|(?:-=)+-$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Spells Line</name>
					<script>if matches[2] and matches[3] then
	local nameA = string.lower(string.trim(matches[2]))
	local percentA = tonumber(matches[3])
	Character.Spells[GUI.CaptureGuild][nameA] = percentA

	if matches[4] and matches[5] then
		local nameB = string.lower(string.trim(matches[4]))
		local percentB = tonumber(matches[5])
		Character.Spells[GUI.CaptureGuild][nameB] = percentB
  end
	  
  if table.contains(GUI.Mute, "Character.Spells") then
    deleteLine()
  end

end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\s+([\w\s]+)\s:\s+(\d+)%\s+\|\s*(?:([\w\s]+)\s:\s+(\d+)%\s*)?$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Spells End</name>
					<script>if table.contains(GUI.Mute, "Character.Spells") then
	deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(?:-=)+-$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Spells End Test</name>
					<script>--cecho("\n -- &lt;red&gt;Spells Prompt!&lt;reset&gt;\n")
if table.contains(GUI.Mute, "Character.Spells") then
	deleteLine()
  table.remove(GUI.Mute, table.index_of(GUI.Mute, "Character.Spells"))
end
GUI.CaptureGuild = ""
disableTrigger("Spells Guild Header")
disableTrigger("Spells Line")
disableTrigger("Spells End")
disableTrigger("Character.Spells")
disableTrigger("Spells End Test")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>1</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(?:-=)+-$</string>
						<string>return isPrompt()</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>4</integer>
					</regexCodePropertyList>
				</Trigger>
			</Trigger>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Character Misc</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Stop Skill/Spell</name>
				<script>Character.ActiveSkill = ""
Character.ActiveSpell = ""
</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>You break your concentration.</string>
					<string>Your concentration is interrupted.</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Combat</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Enemy Death</name>
				<script>local cmd = "do"
if Character.ActiveSkill ~= "" and Character.ActiveSkill ~= nil then
	Character.ActiveSkill = ""
	cmd = cmd.." use stop;"
elseif Character.ActiveSpell ~= "" and Character.ActiveSpell ~= nil then
	Character.ActiveSpell = ""
	cmd = cmd.." cast stop;"
end
if Character.Loot == true then
	if Character.EatCorpses == true then
		cmd = cmd.." loot; eat first corpse;"
	elseif Character.DigGrave == true then
		cmd = cmd.." loot; dig grave;"
	end
elseif Character.EatCorpses == true then
	cmd = cmd.." eat first corpse;"
elseif Character.DigGrave == true then
	cmd = cmd.." dig grave;"
end
--display(GUI.Mute)
enableTrigger("Character.Exp")
if table.contains(GUI.Mute, "Character.Exp") == false then table.insert(GUI.Mute, "Character.Exp") end
if table.contains(GUI.Mute, "Character.Inventory") == false then table.insert(GUI.Mute, "Character.Inventory") end
cmd = cmd.." exp; i;"
cecho("\n&lt;sky_blue&gt;Looting...&lt;reset&gt;")
send(cmd, GUI.Debug)
flashButtonBox("BoxEnemy", 0.25, 0.5)</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^([\w\s]+) falls to the ground DEAD!$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Undead Death</name>
				<script>if Character.Loot == true then
	send("get all", true)
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^Undead's corpse turns to dust.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>You try to FLEE!</name>
				<script>local cmd = "do"
if Character.ActiveSkill ~= "" and Character.ActiveSkill ~= nil then
	Character.ActiveSkill = ""
	cmd = cmd.." use stop;"
elseif Character.ActiveSpell ~= "" and Character.ActiveSpell ~= nil then
	Character.ActiveSpell = ""
	cmd = cmd.." cast stop;"
end
if cmd ~= "do" then
	send(cmd)
end
flashButtonBox("BoxEnemy", 0.5, 1)
tempTimer( 2, function () flashButtonBox("BoxEnemy", 0.5, 1) end )
tempTimer( 4, function () GUI.resetEnemy() end )</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^You try to FLEE!$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Combat Colors</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Critical Hit Color</name>
					<script>selectString(matches[1], 1)
fg(GUI.colors.combat_crit)
resetFormat()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You score a CRITICAL hit!$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Critical Enemy Hit Color</name>
					<script>selectString(matches[1], 1)
fg(GUI.colors.combat_enemycrit)
resetFormat()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(?:.+) scores a CRITICAL hit!$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Done Looting Color</name>
					<script>selectCurrentLine()
fg("sky_blue")
deselect()
resetFormat()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Done. You looted (\d+) corpse(?:s)?.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>It stuns you Color</name>
					<script>selectCurrentLine()
fg("orange_red")
deselect()
resetFormat()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(?:[\w\s\.]+) stuns you with the force of its attack!$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Specials</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>It stuns you</name>
					<script>if Character.ActiveSkill and Character.ActiveSkill ~= "" then
	cecho("\n&lt;sky_blue&gt;Retrying "..Character.ActiveSkill"...&lt;reset&gt;\n")
	useSkill(Character.ActiveSkill)
elseif Character.ActiveSkpell and Character.ActiveSpell ~= "" then
	cecho("\n&lt;sky_blue&gt;Recasting "..Character.ActiveSpell"...&lt;reset&gt;\n")
	castSpell(Character.ActiveSpell)
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>3</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(?:[\w\s\.]+) stuns you with the force of its attack!$</string>
						<string>^You break your concentration.$</string>
						<string>^Your concentration is interrupted.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Nav</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Party</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>P Target</name>
				<script>target = matches[2]</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^Zethyr [wangotango]: Target:(.*)</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>RDMP</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>RDMP Zero</name>
				<script>--echo("True")
deleteLine()</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>2</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>return isPrompt()</string>
					<string>^$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>4</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>RDMP</name>
				<script>if matches[2] then
  test = string.starts(matches[2], Character.RDMPCode.."")
  --if (test) then echo("True") else echo ("False") end
  if(test) then
  	if table.contains(GUI.CustomChannels, "RDMP") then
  		selectString("RDMP "..Character.RDMPCode.." ", 1)
  		replace("")
    	selectCurrentLine()
    	copy()
    	appendBuffer("ChatCustomConsole")
  	end
  	doRDMP(matches[2])
  	deleteLine()
  end
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^RDMP (.*)$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Skills</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Skill Colors</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Skill Prepare</name>
					<script>selectString(matches[1], 1)
fg(GUI.colors.skill_start)
resetFormat()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You prepare yourself to use a skill.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Skill Ready</name>
					<script>selectString(matches[1], 1)
fg(GUI.colors.skill_ready)
resetFormat()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You are ready to perform your skill.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Spells</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Spell  Colors</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Spell Prepare</name>
					<script>selectString(matches[1], 1)
fg(GUI.colors.spell_start)
resetFormat()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You begin to chant.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Spell Ready</name>
					<script>selectString(matches[1], 1)
fg(GUI.colors.spell_ready)
resetFormat()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You finish the chant.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Area Specific Triggers</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Coldwell's Strawberry Patch</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Coldwell.Pick ripe strawberry</name>
					<script>send("pick a strawberry")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>1</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^$</string>
						<string>^A ripe strawberry is just waiting to be picked$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Shops</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Items Sold</name>
				<script>if table.contains(GUI.Mute, "Character.Exp") == false then
  table.insert(GUI.Mute, "Character.Exp")
end
enableTrigger("Character.Exp")
send("exp", false)
render_progress()</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^You sold (?:[\d,]+) items for (?:[\d,]+) gold.$</string>
					<string>^You sold (?:.+) for (?:[\d,]+) gold.$</string>
					<string>^\[[^\]]+\]: You receive \d+ gold.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Eq</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Race Leader Eq</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Lizardman</name>
					<script>send("wear tailspike")
enableTrigger("Character.Score")
if table.contains(GUI.Mute, "Character.Score") == false then
	table.insert(GUI.Mute, "Character.Score")
end
send("score", false)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Rawknrhol noticing your power and having deemed you worthy(.*)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Event Specific Triggers</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Undead Reanimation</name>
				<script>Character.Target = string.lower(multimatches[1][2])
send("attack "..Character.Selector.." "..Character.Target, true)</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>2</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^.*causes ([\w\s]+) to reanimate!$</string>
					<string>^([\w\s]+) cackles as it attacks you.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage>
		<TimerGroup isActive="no" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
			<name>Combat</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<time>00:00:00.000</time>
		</TimerGroup>
		<TimerGroup isActive="no" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
			<name>Nav</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<time>00:00:00.000</time>
		</TimerGroup>
		<TimerGroup isActive="no" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
			<name>Skills</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<time>00:00:00.000</time>
		</TimerGroup>
		<TimerGroup isActive="no" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
			<name>Spells</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<time>00:00:00.000</time>
		</TimerGroup>
	</TimerPackage>
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Character</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>^score$</name>
				<script>if table.contains(GUI.Mute, "Character.Score") then
  table.remove(GUI.Mute, table.index_of(GUI.Mute, "Character.Score"))
end
enableTrigger("Character.Score")
send("score", false)
tempTimer( 2, function () render_console("CharacterConsole", menu_body["CharacterConsole"] ) end )</script>
				<command></command>
				<packageName></packageName>
				<regex>^score$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>^stats$</name>
				<script>enableTrigger("Character.Stats")
send("stats", false)</script>
				<command></command>
				<packageName></packageName>
				<regex>^stats$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>^exp$</name>
				<script>enableTrigger("Character.Exp")
send("exp", false)</script>
				<command></command>
				<packageName></packageName>
				<regex>^exp$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>^i$</name>
				<script>if table.contains(GUI.Mute, "Character.Inventory") then
  table.remove(GUI.Mute, table.index_of(GUI.Mute, "Character.Inventory"))
end
send("i", false)
tempTimer( 2, function () render_console("InventoryConsole", menu_body["InventoryConsole"] ) end )</script>
				<command></command>
				<packageName></packageName>
				<regex>^i$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>^skills$</name>
				<script>if table.contains(GUI.Mute, "Character.Skills") == true then
	table.remove(GUI.Mute, table.index_of(GUI.Mute, "Character.Skills"))
end
if table.contains(GUI.Mute, "Character.Exp") == false then
	table.insert(GUI.Mute, "Character.Exp")
end
disableTrigger("Character.Spells")
enableTrigger("Character.Skills")
enableTrigger("Character.Exp")
--cecho("&lt;sky_blue&gt;updating skills...&lt;reset&gt;")
send("do exp; skills;", false)</script>
				<command></command>
				<packageName></packageName>
				<regex>^skills$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>^spells$</name>
				<script>if table.contains(GUI.Mute, "Character.Spells") == true then
	table.remove(GUI.Mute, table.index_of(GUI.Mute, "Character.Spells"))
end
if table.contains(GUI.Mute, "Character.Align") == false then
	table.insert(GUI.Mute, "Character.Align")
end
disableTrigger("Character.Skills")
enableTrigger("Character.Spells")
enableTrigger("Character.Align")
--cecho("&lt;sky_blue&gt;updating spells...&lt;reset&gt;")
send("do align; spells;", false)</script>
				<command></command>
				<packageName></packageName>
				<regex>^spells$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Combat</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Targets</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>Set Target</name>
				<script>if matches[2] ~= "" then
  Character.Target = matches[2]
  send("do x first " .. Character.Target .."; consider first " .. Character.Target)
elseif matches[2] == "" then
	Character.Target = ""
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^target(?: (.*))?$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Set Ally</name>
				<script>if matches[2] then
	Character.Ally = matches[2]
else
	Character.Ally = Character.Name
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^ally(?: (.*))?$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Attack/Kill Target</name>
				<script>if matches[2] then
	Character.Target = matches[2]
	send("kill "..Character.Selector.." "..Character.Target)
elseif Character.Enemy ~= "No Enemy" then
	send("kill "..Character.Selector.." "..Character.Enemy)
elseif Character.Target ~= "" then
	send("kill "..Character.Selector.." "..Character.Target)
else
cecho("&lt;sky_blue&gt;No Enemy or Target provided...")
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^(?:kill|attack) ?([\w\s]+)?$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Nav</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>Examine</name>
				<script>if matches[2] then
	send( "examine " .. matches[2])
else
	send("do x; search;")
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^x(?: (.*))?$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>RDMP</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>RDMP ON</name>
				<script>if matches[2] then
  Character.RDMPCode = matches[2]
	Character.RDMPStatus = "ON"
  send("RDMP ON "..2332, false)
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^RDMP ON (\d{4})$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>RDMP OFF</name>
				<script>Character.RDMPStatus = "OFF"
GUI.HpBar:setValue(0, 100, "")
GUI.SpBar:setValue(0, 100, "")
GUI.EpBar:setValue(0, 100, "")
GUI.EHpBar:setValue(0, 100, "")

GUI.HpBarLabel:echo("&lt;b&gt;RDMP OFF&lt;/b&gt;")
GUI.SpBarLabel:echo("&lt;b&gt;RDMP OFF&lt;/b&gt;")
GUI.EpBarLabel:echo("&lt;b&gt;RDMP OFF&lt;/b&gt;")
GUI.EHpBarLabel:echo("&lt;b&gt;RDMP OFF&lt;/b&gt;")

send("RDMP OFF", false)</script>
				<command></command>
				<packageName></packageName>
				<regex>^RDMP OFF$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Spells</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>^cast</name>
				<script>if matches[2] then
	local cmdArr = {}
	local target
	if string.match(matches[2], " at ") ~= nil then
		cmdArr = string.split(matches[2], " at ")		
	elseif string.match(matches[2], " on ") ~= nil then
		cmdArr = string.split(matches[2], " on ")
	else
		cmdArr = {matches[2]}
	end
	if #cmdArr &gt; 1 then
		targetArr = string.split(cmdArr[2], " ")
	else
		targetArr = {}
	end
	--display(cmdArr)
	local name = cmdArr[1]
	name = spellAlias(name)
	castSpell(name, targetArr)
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^cast\s?(.*)$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Skills</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>^use</name>
				<script>if matches[2] then
	local cmdArr = {}
	local target
	if string.match(matches[2], " at ") ~= nil then
		cmdArr = string.split(matches[2], " at ")		
	elseif string.match(matches[2], " on ") ~= nil then
		cmdArr = string.split(matches[2], " on ")
	else
		cmdArr = {matches[2]}
	end
	if #cmdArr &gt; 1 then
		targetArr = string.split(cmdArr[2], " ")
	else
		targetArr = {}
	end
	--display(cmdArr)
	local name = cmdArr[1]
	name = skillAlias(name)
	useSkill(name, targetArr)
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^use\s?(.*)$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Party</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Party Up!</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>party up</name>
					<script>for i = 1, #Party.Roster do
   send("party invite " .. Party.Roster[i])
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^party up</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>party add</name>
					<script>names = {}
s = matches[2]
for substring in s:gmatch("%S+") do
   table.insert(names, substring)
end
display(names)

for i = 1, #names do
  name = names[i]
	if table.find(Party.Roster, name) ~= true then
		table.insert(Party.Roster, name)
	end
end

echo("Party (" .. #Party.Roster .. ")")
display(Party.Roster)</script>
					<command></command>
					<packageName></packageName>
					<regex>^party add (.*)</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Party Create</name>
					<script>send("party create "..matches[2])
Party.Name = matches[2]</script>
					<command></command>
					<packageName></packageName>
					<regex>^party create(?: (.*))?$</regex>
				</Alias>
			</AliasGroup>
			<Alias isActive="yes" isFolder="no">
				<name>Set Party Target</name>
				<script>if matches[2] then
  Character.Target = matches[2]
  send("p' ptarget "..Character.Target)
else
	Character.Target = ""	
end
</script>
				<command></command>
				<packageName></packageName>
				<regex>^ptarget(?: (.*))?$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Utility</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>^setPrompt$</name>
				<script>setPrompt()</script>
				<command></command>
				<packageName></packageName>
				<regex>^setPrompt$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>^reset (item)$</name>
				<script>if matches[2] == " stats" then
  enableTrigger("Character.ResetStats")
  send("do remove all;stats")
elseif matches[3] == " enemy" then
	GUI.resetEnemy()
else

end

function GUI.resetEnemy()
	cecho("&lt;sky_blue&gt;enemy reset...")
	Character.Enemy = "No Enemy"
	Character.EHp = 0
	GUI.EHpBar:setValue(Character.EHp)
	GUI.EHpBarLabel:echo("&lt;b&gt;"..Character.Enemy.." ("..Character.EHp.."%)&lt;/b&gt;")
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^reset( stats)?( enemy)?$</regex>
			</Alias>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage>
		<ActionGroup isActive="no" isFolder="yes" isPushButton="no" isFlatButton="no" useCustomLayout="no">
			<name>Combat</name>
			<packageName></packageName>
			<script></script>
			<css></css>
			<commandButtonUp></commandButtonUp>
			<commandButtonDown></commandButtonDown>
			<icon></icon>
			<orientation>0</orientation>
			<location>4</location>
			<posX>-983</posX>
			<posY>-1135</posY>
			<mButtonState>1</mButtonState>
			<sizeX>0</sizeX>
			<sizeY>0</sizeY>
			<buttonColumn>2</buttonColumn>
			<buttonRotation>0</buttonRotation>
			<buttonColor>#ffffff</buttonColor>
		</ActionGroup>
		<ActionGroup isActive="no" isFolder="yes" isPushButton="no" isFlatButton="no" useCustomLayout="no">
			<name>Nav</name>
			<packageName></packageName>
			<script></script>
			<css></css>
			<commandButtonUp></commandButtonUp>
			<commandButtonDown></commandButtonDown>
			<icon></icon>
			<orientation>1</orientation>
			<location>0</location>
			<posX>0</posX>
			<posY>0</posY>
			<mButtonState>1</mButtonState>
			<sizeX>0</sizeX>
			<sizeY>0</sizeY>
			<buttonColumn>1</buttonColumn>
			<buttonRotation>0</buttonRotation>
			<buttonColor>#ffffff</buttonColor>
		</ActionGroup>
		<ActionGroup isActive="no" isFolder="yes" isPushButton="no" isFlatButton="no" useCustomLayout="no">
			<name>Skills</name>
			<packageName></packageName>
			<script></script>
			<css></css>
			<commandButtonUp></commandButtonUp>
			<commandButtonDown></commandButtonDown>
			<icon></icon>
			<orientation>1</orientation>
			<location>0</location>
			<posX>0</posX>
			<posY>0</posY>
			<mButtonState>1</mButtonState>
			<sizeX>0</sizeX>
			<sizeY>0</sizeY>
			<buttonColumn>1</buttonColumn>
			<buttonRotation>0</buttonRotation>
			<buttonColor>#ffffff</buttonColor>
		</ActionGroup>
		<ActionGroup isActive="no" isFolder="yes" isPushButton="no" isFlatButton="no" useCustomLayout="no">
			<name>Spells</name>
			<packageName></packageName>
			<script></script>
			<css></css>
			<commandButtonUp></commandButtonUp>
			<commandButtonDown></commandButtonDown>
			<icon></icon>
			<orientation>1</orientation>
			<location>0</location>
			<posX>0</posX>
			<posY>0</posY>
			<mButtonState>1</mButtonState>
			<sizeX>0</sizeX>
			<sizeY>0</sizeY>
			<buttonColumn>1</buttonColumn>
			<buttonRotation>0</buttonRotation>
			<buttonColor>#ffffff</buttonColor>
		</ActionGroup>
	</ActionPackage>
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>_Init</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>GUI.init</name>
				<packageName></packageName>
				<script>-- Setup all of our lobal objects here --

-- These tables are saved to Json
Character = Character or {}

Party = Party or {}
	Party.Roster = Party.Roster or {}

-- Not saved
GUI = GUI or {}
	GUI.Initialized = false
	GUI.Debug = GUI.Debug or false
	GUI.icons = GUI.icons or {}
	GUI.greys = GUI.greys or {}
	GUI.consoles = GUI.consoles or {}
	GUI.gauges = GUI.gauges or {}
	GUI.colors = GUI.colors or 
		{
  		header = "purple",
			subheader = "purple",
    	item = "medium_purple",
			eq_item = "DarkOrchid",
    	value = "light_grey",
    	bonus = "lime_green",
    	penalty = "red",
			combat_crit = "LimeGreen",
			combat_enemycrit = "OrangeRed",
			skill_start = "DeepSkyBlue",
			skill_ready = "DeepSkyBlue",
			spell_start = "MediumPurple",
			spell_ready = "MediumPurple",
		}
	GUI.ConsoleFontSize = GUI.ConsoleFontSize or 10
	GUI.FontSize = GUI.FontSize or 3
		
	GUI.Aliases = GUI.Aliases or {}
	GUI.Commands = GUI.Commands or {}
	GUI.Mute = GUI.Mute or {}
	GUI.CaptureChat = GUI.CaptureChat or true
	GUI.HideTells = GUI.HideTells or false
	
	GUI.InvSection = GUI.InvSection or ""
	GUI.InventoryHidEq = GUI.InventoryHidEq or false


RDMP = RDMP or {}
	RDMP.handlers = RDMP.handlers or {}
	
sys = sys or {};</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>sys.init</name>
				<packageName></packageName>
				<script>--json.encode(table, {indent = ##})
--json.decod(string)

if not json then
	cecho("&lt;green&gt;json&lt;DimGrey&gt;:&lt;white&gt; Loading modules...\n")

	local path = package.path
	local homeDirectory = getMudletHomeDir():gsub("\\", "/")
	
	local luaDirectory = string.format("%s/%s", homeDirectory, [[IoMCore/libraries/?.lua]])
	local initDirectory = string.format("%s/%s", homeDirectory, [[IoMCore/libraries/?/init.lua]])
	package.path = string.format("%s;%s;%s", luaDirectory, initDirectory, path)

	local okay, content = pcall(require, "json")
	package.path = path

	if okay then
		json = content
	else
		cecho(string.format("&lt;firebrick&gt;json&lt;DimGrey&gt;:&lt;white&gt;  Error loading module: %s.\n", content))
	end

	if json then
		cecho("&lt;green&gt;json&lt;DimGrey&gt;:&lt;white&gt; Modules successfully loaded.\n")
		tempTimer( 1, function () raiseEvent( "jsonLoadEvent" ) end )
	end
end


function sys.echo(stuff)
  stuff = stuff or ""
  moveCursorEnd("main") if getCurrentLine() ~= "" then echo"\n" end
  cecho("&lt;DimGrey&gt;(&lt;slate_grey&gt;sys&lt;DimGrey&gt;)&lt;DimGrey&gt;:&lt;white&gt; " .. tostring(stuff))
  echo("\n")
end -- function

function sys.save(n, t)
	if string.find(getMudletHomeDir(), "/") then _sep = "/" else  _sep = "\\" end
	local f = getMudletHomeDir() .. _sep .. "IoMCore" .. _sep .. "data" .. _sep .. n .. ".json"
	--table.save(f, t)
	--if io.exists(f) then
  	local str = json.encode (t, { indent = 2 })
  	local file,err = io.open(f, "w")
    if file and err == nil then
        file:write(str)
        file:close()
				cecho("&lt;green&gt;saved&lt;DimGrey&gt;:&lt;white&gt; " .. f.."\n")
				return true
    else
        cecho("&lt;firebrick&gt;save failed&lt;DimGrey&gt;:&lt;white&gt; "..err.."\n")
				return false
    end
	--end
end -- function

function sys.load(n, t)
	if string.find(getMudletHomeDir(), "/") then _sep = "/" else  _sep = "\\" end
	local f = getMudletHomeDir() .. _sep .. "IoMCore" .. _sep .. "data" .. _sep .. n .. ".json"
	if io.exists(f) then
		--table.load(f, t)
		local file = io.open(f)
    local s = file:read("*a")
    file:close()
		local obj, pos, err = json.decode (s, 1, nil)
    if err then
      cecho ("&lt;firebrick&gt;Error&lt;DimGrey&gt;:&lt;white&gt; ".. err.."\n")
			return nil
    else
		 cecho("&lt;green&gt;loaded&lt;DimGrey&gt;:&lt;white&gt; " .. f.."\n")
		 --display(t)
		 return obj
    end
	else
		sys.echo("&lt;firebrick&gt;load failed&lt;DimGrey&gt;:&lt;white&gt; " .. f .. " does not exist.\n")
		return false
	end -- if
end -- function

function sys.init(event)
	if event == "sysLoadEvent" then
		initGUI()
	elseif event == "sysExitEvent" then
		local characterSaved = sys.table(Character.Name..".Character", Character, "Save")
		local partySaved = sys.table(Character.Name..".Party", Party, "Save")
		local hotkeysSaved = sys.table(Character.Name..".Hotkeys", Hotkeys, "Save")
		if characterSaved and partySaved and hotkeysSaved then
			cecho("&lt;green&gt;exit&lt;DimGrey&gt;:&lt;white&gt; SAVE SUCCESSFUL!\n")
		end
	end
end -- function

function sys.table(loc, table, event)
	if event == "Load" then
		local result = sys.load(loc, table)
  	return result
	elseif event == "Save" then
		return sys.save(loc, table)
	end
end</script>
				<eventHandlerList>
					<string>sysExitEvent</string>
					<string>sysLoadEvent</string>
				</eventHandlerList>
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Character_init()</name>
				<packageName></packageName>
				<script>--RDMP
Character.RDMPCode = RDMPCode or "2332"
Character.RDMPStatus = RDMPStatus or "ON"
--Combat
Character.Aliases = Character.Aliases or {}
Character.Target = Character.Target or ""
Character.Selector = Character.Selector or "first"
Character.Enemy = Character.Enemy or ""
Character.Loot = Character.Loot or true
Character.DigGrave = Character.DigGrave or false
Character.EatCorpse = Character.EatCorpse or false
--CharacterConsole
Character.Name = Character.Name or "UnNamed"
Character.Surname = Character.Surname or ""
Character.Title = Character.Title or ""
Character.GuildName = Character.GuildName or ""
Character.Race = Character.Race or "Unknown"
Character.Level = Character.Level or 0
Character.OpenLevels = Character.OpenLevels or 0
--Stats
Character.Stats = Character.Stats or {
	Str = {Current = 0, Base = 0},
	Dex = {Current = 0, Base = 0},
	Con = {Current = 0, Base = 0},
	Sta = {Current = 0, Base = 0},
	Int = {Current = 0, Base = 0},
	Wis = {Current = 0, Base = 0},
	Cha = {Current = 0, Base = 0},
}
Character.Hpr = Character.Hpr or 0
Character.Spr = Character.Spr or 0
Character.Epr = Character.Epr or 0
Character.Hunger = Character.Hunger or 100
Character.Hp = Character.Hp or {
	Current = 0,
	Max = 0
}
Character.Sp = Character.Sp or {
	Current = 0,
	Max = 0
}
Character.Ep = Character.Ep or {
	Current = 0,
	Max = 0
}
--Traits
Character.AC = Character.AC or 0
Character.Wimpy = Character.Wimpy or 30
Character.Poisoned = Character.Poisoned or 0
Character.Hiding = Character.Hiding or 0
Character.Stealth = Character.Stealth or 0
Character.Height = Character.Height or ""
Character.Weight = Character.Weight or 0
Character.Growth = Character.Growth or 0
Character.Alignment = Character.Alignment or 0
Character.Scars = Character.Scars or 0
--GUILDS
Character.Guilds = Character.Guilds or 
{
	alpha = {},
	gamma = {},
	bravo = {},
	omicrom = {}
}
--GOLD
Character.Gold = Character.Gold or {
	Current = 0,
	Bank = 0
}
--EXP
Character.Exp = Character.Exp or {
	Current = 0,
	NextAdvLevel = 100,
	NextGuildLevel = 100,		
}
--HIGHSCORES
Character.TaskPoints = Character.TaskPoints or 0
Character.Kills = Character.Kills or 0
Character.Explored = Character.Explored or {
	Rooms = 0,
	MudPercent = 0,
	NextReward = 0
}
--MAIL
Character.Mail = Character.Mail or {
	New = 0,
	Total = 0
}
--EQUIPMENT
Character.Eq = Character.Eq or {
	Weapons = {},
	Armor = {}
}
--INVENTORY
Character.InventoryWeight = Character.InventoryWeight or 0
Character.InventoryCapacity = Character.InventoryCapacity or 0
Character.Inventory = Character.Inventory or {}
Character.InventoryHeadersBg = Character.InventoryHeadersBg or {}
Character.InventoryHeadersFg = Character.InventoryHeadersFg or {}
--SKILLS
Character.Skills = Character.Skills or {}
--SPELLS
Character.Spells = Character.Spells or {}

</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Character_io()</name>
				<packageName></packageName>
				<script>function Character_io(event)
  if event == "Load" then
  	cecho("&lt;green&gt;sys&lt;DimGrey&gt;:&lt;white&gt; Character Data Loading..\n")
  	if not json then
  		cecho("&lt;firebrick&gt;json&lt;DimGrey&gt;:&lt;white&gt; json Not Loaded\n")
  		end
  	if GUI.Initialized == false then
  		cecho("&lt;firebrick&gt;sys&lt;DimGrey&gt;:&lt;white&gt; GUI not initialized\n")
  	end
  	--test for character and party files
  	
  	if json and GUI.Initialized == true then
  		local Temp = {Character= {}, Party = {}, Hotkeys = {}}
  		Temp.Character = sys.table(Character.Name..".Character", Character, event)
  		Temp.Party = sys.table(Character.Name..".Party", Party, event)
			Temp.Hotkeys = sys.table(Character.Name..".Hotkeys", Hotkeys, event)
  		if Temp.Character == nil or Temp.Party == nil then
  			cecho("&lt;firebrick&gt;sys&lt;DimGrey&gt;:&lt;white&gt; Character_load() error with sys.table()\n")
  			return nil
  		elseif Temp.Character == false then  			
  			local saveCharacter = sys.table(Character.Name..".Character", Character, "Save")
  			local saveParty = sys.table(Character.Name..".Party", Party, "Save")
				local saveHotkeys = sys.table(Character.Name..".Hotkeys", Hotkeys, "Save")
  			if saveCharacter == true and saveParty == true and saveHotkeys == true then
					cecho("&lt;green&gt;sys&lt;DimGrey&gt;:&lt;white&gt; New Save Data created for "..Character.Name.."\n")
				end
  			return false
  		else
  			Character = table.deepcopy(Temp.Character)
  			Party = table.deepcopy(Temp.Party)
				Hotkeys = table.deepcopy(Temp.Hotkeys)
  			cecho("&lt;green&gt;sys&lt;DimGrey&gt;:&lt;white&gt; Character Data for "..Character.Name.." loaded.\n")
  			return true
  		end	
  	end
	elseif event == "Save" then
		local saveCharacter = sys.table(Character.Name..".Character", Character, "Save")
  	local saveParty = sys.table(Character.Name..".Party", Party, "Save")
		local saveHotkeys = sys.table(Character.Name..".Hotkeys", Hotkeys, "Save")
  	if saveCharacter == true and saveParty == true then cecho("&lt;green&gt;sys&lt;DimGrey&gt;:&lt;white&gt; Data saved for "..Character.Name.."\n") end
	end	
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>GUI.Lookup_init()</name>
				<packageName></packageName>
				<script>function testColors(t)
	for k,v in pairs(t) do
		cecho("&lt;"..v.."&gt;TEST:"..v.." "..k.."&lt;reset&gt;\n")
	end
end

function lookupHunger(h)
	if not h then return "Starved" end
	for index = 1, #GUI.Lookup.HungerBreaks-1 do
		local i = GUI.Lookup.HungerBreaks[index]
		if i &lt;= h and h &lt; GUI.Lookup.HungerBreaks[index+1] then
			return GUI.Lookup.Hunger[i]
		elseif h == 100 then
			return GUI.Lookup.Hunger[h]
		end
	end
end

function lookupHungerColor(h)
	local hungerWord = lookupHunger(h)
	local colorWord = GUI.Lookup.HungerColors[hungerWord] or ""
	--echo(colorWord.." "..h.."\n")
	return colorWord
end

function lookupCapacityColor(c)
	if c &gt; 0 and c &lt;= 25 then
		return "lime_green"
	elseif c &lt; 50 then
		return "yellow_green"
	elseif c &lt; 75 then
		return "yellow"
	elseif c &lt; 85 then
		return "dark_orange"
	else
		return "red"
	end
end

--Mud Specific Values

GUI.Lookup = GUI.Lookup or
	{
		StatAb = {
      ["Str"] = "Strength", ["Strength"] = "Str",
      ["Dex"] = "Dexterity", ["Dexterity"] = "Dex",
      ["Con"] = "Constitution", ["Constitution"] = "Con",
      ["Sta"] = "Stamina", ["Stamina"] = "Sta",
      ["Wis"] = "Wisdom", ["Wisdom"] = "Wis",
      ["Int"] = "Intelligence", ["Intelligence"] = "Int",
      ["Cha"] = "Charisma", ["Charisma"] = "Cha", 
		},
		Poisoned = {
			[0] = "No", ["No"] = 0,
			[1] = "Yes", ["Yes"] = 1
		},
		PoisonedColors = { [0] = "lime_green", [1] = "red"},
		Hiding = {
			[0] = "No", ["No"] = 0,
			[1] = "Yes", ["Yes"] = 1
		},
		HidingColors = { "$value", "yellow"},
		Growth = {
			[0] = "Growing", ["Growing"] = 0,
			[1] = "Full", ["Full"] = 1
		},
		GrowthColors = {[0] = "yellow", [1] = "lime_green"},
		Hunger = {
      [100] = "Stuffed",
      [95] = "Full",
      [75] = "Content",
      [50] = "Peckish",
      [20] = "Hungry",
      [10] = "Craving",
      [2] = "Starving",
			[0] = "Starved"
		},
		HungerBreaks = {0, 2, 10, 20, 50, 75, 95, 100},
		HungerColors = {
			["Stuffed"] = "lime_green",
			["Full"] = "green_yellow",
			["Content"] = "yellow",
			["Peckish"] = "dark_orange",
			["Hungry"] = "orange_red",
			["Craving"] = "red",
			["Starving"] = "purple",
			["Starved"] = "magenta"
		},
		Alignment = {
      [10] = "God Like", ["God Like"] = 10,
      [9] = "Saint", ["Saint"] = 9,
      [8] = "Holy man", ["Holy man"] = 8,
      [7] = "Good", ["Good"] = 7,
      [6] = "Sli. Good", ["Sli. Good"] = 6,
      [5] = "Neutral", ["Neutral"] = 5,
      [4] = "Sli. Evil", ["Sli. Evil"] = 4,
      [3] = "Evil", ["Evil"] = 3,
      [2] = "Very Evil", ["Very Evil"] = 2,
      [1] = "Demonic", ["Demonic"] = 1,
      [0] = "Satanic", ["Satanic"] = 0
		},
		AlignColors = {
			[0] = "purple",
			[1] = "red",
			[2] = "orange_red",
			[3] = "dark_orange",
			[4] = "goldenrod",			
			[5] = "light_goldenrod",
			[6] = "beige",
			[7] = "bisque",			
			[8] = "lavender_blush",
			[9] = "lavender",
			[10] = "azure"
		},
		AC = {
      [0] = "None", ["None"] = 0,
      [1] = "Low", ["Low"] = 1,
			[2] = "VLow", ["VLow"] = 2,
      [3] = "Avg", ["Avg"] = 3,
      [4] = "High", ["High"] = 4,
      [5] = "Vhigh", ["Vhigh"] = 5,
      [6] = "Great", ["Great"] = 6,
      [7] = "Super", ["Super"] = 7,
      [8] = "BEST", ["BEST"] = 8
		},
		ACColors = {
      [0] = "dark_orange",
      [1] = "orange",
      [2] = "yellow",
      [3] = "green_yellow",
      [4] = "lime_green",
      [5] = "spring_green",
      [6] = "turquoise",
      [7] = "aquamarine",
		},
		Damage = {
      [0] = "None", ["None"] = 0,
      [1] = "Almost nothing", ["Almost nothing"] = 1,
      [2] = "Negligible", ["Negligible"] = 2,
      [3] = "Noticeable", ["Noticeable"] = 3,
      [4] = "Extremely low", ["Extremely low"] = 4,
      [5] = "Very low", ["Very low"] = 5,
      [6] = "Low", ["Low"] = 6,
      [7] = "Small", ["Small"] = 7,
      [8] = "Under average", ["Under average"] = 8,
      [9] = "Average", ["Average"] = 9,
      [10] = "Above average", ["Above average"] = 10,
      [11] = "Important", ["Important"] = 11,
      [12] = "Impressive", ["Impressive"] = 12,
      [13] = "High", ["High"] = 13,
      [14] = "Very high", ["Very high"] = 14,
      [15] = "Extremely high", ["Extremely high"] = 15,
      [16] = "Enormous", ["Enormous"] = 16,
      [17] = "HUGE", ["HUGE"] = 17,
      [18] = "Incredible", ["Incredible"] = 18
		},
		DamageColors = {},
		DamageType = 
		{
			["1"] = "physical", ["physical"] = "1",
      ["2"] = "psionic", ["psionic"] = "2",
      ["3"] = "poison", ["poison"] = "3",
      ["4"] = "cold", ["cold"] = "4",
      ["5"] = "fire", ["fire"] = "5",
      ["6"] = "electric", ["electric"] = "6",
      ["7"] = "magical", ["magical"] = "7",
      ["8"] = "holy", ["holy"] = "8",
      ["9"] = "unholy", ["unholy"] = "9",
      ["10"] = "acid", ["acid"] = "10",
      ["11"] = "asphyxiation", ["asphyxiation"] = "11"			
		},
		DamageTypeAb =
		{
			["phys"] = "physical", ["physical"] = "phys",
      ["psi"] = "psionic", ["psionic"] = "psi",
      ["pois"] = "poison", ["poison"] = "pois",
      ["cold"] = "cold", ["cold"] = "cold",
      ["fire"] = "fire", ["fire"] = "fire",
      ["elec"] = "electric", ["electric"] = "elec",
      ["mag"] = "magical", ["magical"] = "mag",
      ["holy"] = "holy", ["holy"] = "holy",
      ["unho"] = "unholy", ["unholy"] = "unho",
      ["acid"] = "acid", ["acid"] = "acid",
      ["asph"] = "asphyxiation", ["asphyxiation"] = "asph"
		},
		DamageTypeColors =
		{

		},
		Guilds = {
    	alpha = {
    		"martial artist", 
    		"warrior", 
    		"abjurer", 
    		"elemental", 
    		"evoker", 
    		"necromancer", 
    		"weaver", 
    		"unraveller", 
    		"druid", 
    		"woodsman", 
    		"shapeshifter", 
    		"psychics", 
    		"acrobat", 
    		"lurker"
    	},
    	gamma = {
    		"blacksmith",
    		"mystic warriors",
    		"dragonfist fighter",
    		"traveler",
    		"knight",
    		"defender of the crown",
    		"berserker",
    		"masters of energy",
    		"navigator",
    		"protector of the earth",
    		"irrifletta",
    		"air mage",
    		"earth mage",
    		"water mage",
    		"fire mage",
    		"evoker of ether",
    		"evoker of elements",
    		"bone mage",
    		"voodooist",
    		"necroscope",
    		"confessor",
    		"healer",
    		"martyr",
    		"sacrificer",
    		"magical torturer",
    		"harmer",
    		"animal tamer",
    		"herbalist",
    		"weather watcher",
    		"sylvan guard",
    		"sylvan ward",
    		"bestial seccedaneum",
    		"savager",
    		"telekinetics",
    		"mystics",
    		"street brawler",
    		"bard",
    		"juggler",
    		"poison brewer",
    		"trickster",
    		"assassin"		
    	},
    	bravo = {
    		"order of the crescent moon",
    		"toad master",
    		"tiger master",
    		"snake master",
    		"crane master",
    		"shield master",
    		"thruster",
    		"barbarian",
    		"blade dancer",
    		"flogger",
    		"master abjurer",
    		"master navigators",
    		"enchanter",
    		"harbringer of anguish",
    		"mist mage",
    		"lava mage",
    		"evoker of acid",
    		"evoker of lightning",
    		"evoker of flames",
    		"evoker of poison",
    		"evoker of vacuum",
    		"evoker of force",
    		"evoker of ice",
    		"evoker of magic",
    		"stydian sorcerer",
    		"dreadlord",
    		"scourge",
    		"embalmer",
    		"templar",
    		"exorcist",
    		"avatar",
    		"shields of faith",
    		"servant of shirija",
    		"servant of lloth",
    		"servant of talakh",
    		"servant of mordulak",
    		"adept of the stones",
    		"shaman of the soil",
    		"animal trainer",
    		"sylvan scout",
    		"sylvan protector",
    		"beast lord",
    		"animal healer",
    		"cauldron magic",
    		"psionists",
    		"oneiromancers",
    		"watchers of the night",
    		"bartender",
    		"minstrel",
    		"bannerman",
    		"master assassin",
    		"disciple of shadow"		
    	},
    	omicron = {
    		"dragon master",
    		"champion of the crown",
    		"zerkala maga",
    		"master of disruption",
    		"master enchanter",
    		"guardians",
    		"nether mage",
    		"sorcerer",
    		"blood brother",
    		"lords of undeath",
    		"high priest",
    		"sword of talakh",
    		"elder of mordulak",
    		"primate of lloth",
    		"patriarch of shirija",
    		"chanter of deep earth",
    		"sylvan warlord",
    		"dragon lord",
    		"talisman magic",
    		"troubadour",
    		"gleeman",
    		"silent hand"
    	}
    }
	}</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Utilities</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Globals</name>
					<packageName></packageName>
					<script>function firstToUpper(str)
    return (str:gsub("^%l", string.upper))
end

-- from sam_lie
-- Compatible with Lua 5.0 and 5.1.
-- Disclaimer : use at own risk

---============================================================
-- add comma to separate thousands
-- 
function comma_value(amount)
  local formatted = amount
  while true do  
    formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
    if (k==0) then
      break
    end
  end
  return formatted
end

---============================================================
-- rounds a number to the nearest decimal places
--
function round(val, decimal)
  if (decimal) then
    return math.floor( (val * 10^decimal) + 0.5) / (10^decimal)
  else
    return math.floor(val+0.5)
  end
end

--===================================================================
-- given a numeric value formats output with comma to separate thousands
-- and rounded to given decimal places
--
--
function format_num(amount, decimal, prefix, neg_prefix)
  local str_amount,  formatted, famount, remain

  decimal = decimal or 2  -- default 2 decimal places
  neg_prefix = neg_prefix or "-" -- default negative sign

  famount = math.abs(round(amount,decimal))
  famount = math.floor(famount)

  remain = round(math.abs(amount) - famount, decimal)

        -- comma to separate the thousands
  formatted = comma_value(famount)

        -- attach the decimal portion
  if (decimal &gt; 0) then
    remain = string.sub(tostring(remain),3)
    formatted = formatted .. "." .. remain ..
                string.rep("0", decimal - string.len(remain))
  end

        -- attach prefix string e.g '$' 
  formatted = (prefix or "") .. formatted 

        -- if value is negative then format accordingly
  if (amount&lt;0) then
    if (neg_prefix=="()") then
      formatted = "("..formatted ..")"
    else
      formatted = neg_prefix .. formatted 
    end
  end

  return formatted
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>table.find</name>
					<packageName></packageName>
					<script>--table.find()
function table.find(t, val, recursive, metatables, keys, returnBool)
    if (type(t) ~= "table") then
        return nil
    end

    local checked = {}
    local _findInTable
    local _checkValue
    _checkValue = function(v)
        if (not checked[v]) then
            if (v == val) then
                return v
            end
            if (recursive and type(v) == "table") then
                local r = _findInTable(v)
                if (r ~= nil) then
                    return r
                end
            end
            if (metatables) then
                local r = _checkValue(getmetatable(v))
                if (r ~= nil) then
                    return r
                end
            end
            checked[v] = true
        end
        return nil
    end
    _findInTable = function(t)
        for k,v in pairs(t) do
            local r = _checkValue(t, v)
            if (r ~= nil) then
                return r
            end
            if (keys) then
                r = _checkValue(t, k)
                if (r ~= nil) then
                    return r
                end
            end
        end
        return nil
    end

    local r = _findInTable(t)
    if (returnBool) then
        return r ~= nil
    end
    return r
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Set User Prompt</name>
					<packageName></packageName>
					<script>--Sets a custom prompt specific to Ilsands of Mtyh

--[[
		complex prompt for use without GUI
		local promptCode = "%^BOLD%^%^GREEN%^%N%^RESET%^ %^CYAN%^%x%^RESET%^(%X) %^ORANGE%^%G%^RESET%^g%RHP%^BOLD%^%^GREEN%^%h%^RESET%^/%^BOLD%^%^GREEN%^%H%^RESET%^ SP%^BOLD%^%^CYAN%^%s%^RESET%^/%^BOLD%^%^CYAN%^%S%^RESET%^ EP%^BOLD%^%^MAGENTA%^%e%^RESET%^/%^BOLD%^%^MAGENTA%^%E%^RESET%^ %^BOLD%^%^GREEN%^$%^RESET%^"
	]]
	
-- simple prompt for use with GUI

local promptCode = "%^BOLD%^%^GREEN%^$%^RESET%^"
function setPrompt()
	send("prompt '"..promptCode.."'")
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Switch</name>
					<packageName></packageName>
					<script>switch = function (choice, cases)
  -- accepts both number as well as string
  choice = choice and tonumber(choice) or choice     -- returns a number if the choic is a number or string. 
	--display(cases)
	--echo(choice)
  -- Define your cases
  cases = cases or
   {
     [1] = function ( )                              -- case 1 : 
             print("your choice is Number 1 ")       -- code block
     end,                                            -- break statement

     add = function ( )                              -- case 'add' : 
             print("your choice is string add ")     -- code block
     end,                                            -- break statement

    ['+'] = function ( )                             -- case '+' : 
             print("your choice is char + ")         -- code block
     end,                                            -- break statement

     default = function ( )                          -- default case
             print("no match for "..choice)   
     end,                                            -- u cant exclude end hear :-P
   }
	 
	if not cases["default"] then cases["default"] = print("no match for "..choice.." provided") end

	
  -- execution section
  if cases[choice] then
     return cases[choice]
  else
     return cases["default"]
  end

end
-- Now you can use it as a regular function. Tadaaa..!!
--switch(mychoice)</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>_CSSman</name>
			<packageName>CSSman</packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>CSSMan</name>
				<packageName></packageName>
				<script>-- CSSMan by Vadi. Public domain.

CSSMan = {}
CSSMan.__index = CSSMan

function CSSMan.new(stylesheet)
  local obj  = { stylesheet = {} }
  setmetatable(obj,CSSMan)
  local trim = string.trim

  assert(type(stylesheet) == "string", "CSSMan.new: no stylesheet provided. A possible error is that you might have used CSSMan.new, not CSSMan:new")

  for line in stylesheet:gmatch("[^\r\n]+") do
    local attribute, value = line:match("^(.-):(.-);$")
    if attribute and value then
      attribute, value = trim(attribute), trim(value)
      obj.stylesheet[attribute] = value
    end
  end

  return obj
end

function CSSMan:set(key, value)
  self.stylesheet[key] = value
end

function CSSMan:get(key)
  return self.stylesheet[key]
end

function CSSMan:getCSS(key)
  local lines, concat = {}, table.concat
  for k,v in pairs(self.stylesheet) do lines[#lines+1] = concat({k,": ", v, ";"}) end
  return concat(lines, "\n")
end

function CSSMan:gettable()
  return self.stylesheet
end

function CSSMan:settable(tbl)
  assert(type(tbl) == "table", "CSSMan:settable: table expected, got "..type(tbl))

  self.stylesheet = tbl
end</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>_UI</name>
			<packageName></packageName>
			<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
			<eventHandlerList />
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Guages</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>iguages</name>
					<packageName></packageName>
					<script>-- Big thanks to Jamie W. (Delra) for putting the initial concept together. I just
-- took what they gave me and made it follow the Geyser patterns and used some lesser
-- known Geyser utilities to make it a bit more flexible.

demonnic = demonnic or {}
demonnic.iGauge = demonnic.iGauge or Geyser.Container:new({
  name = "demonnic.iGaugeClass",
	value = 100,
	fillcolor = 'firebrick', --default to a darkish red fill color
	emptycolor = 'black', --default to a black background
	bartype = 'bar', 
	orientation = "horizontal" --only have horizontal but I wanna see if I can figure out vertical.
})

function demonnic.iGauge:oldsetType(bartype)
  self.bartype = bartype
	self.front:setStyleSheet([[
	  border-image: url(]]..getMudletHomeDir()..'/igauges-1.0/'..self.bartype..[[.png);
	]])
end		

function demonnic.iGauge:setType(bartype)
  self.bartype = bartype
	self.front:setStyleSheet([[
	  border-image: url(]]..getMudletHomeDir()..'/images/alphas/'..self.bartype..[[.png);
	]])
end	
		
function demonnic.iGauge:update(value, foreGround, backGround)
	value = (value &lt; 2 and value) or value/100
	if foreGround then self.fillcolor = foreGround end
	if backGround then self.emptycolor = backGround end
	local fgr,fgg,fgb = Geyser.Color.parse(self.fillcolor)
	local bgr,bgg,bgb = Geyser.Color.parse(self.emptycolor)
	local fgc = table.concat({fgr, fgg, fgb}, ', ')
	local bgc = table.concat({bgr, bgg, bgb}, ', ')
	value = tonumber(value)
	local valm = value-0.02
	local valp = value+0.02
	self.back:set('background-color', string.format('qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(%s,255), stop:%.2f rgba(%s, 255), stop:%.2f rgba(%s,255), stop:1 rgba(%s,255))', fgc, valm, fgc, valp, bgc, bgc))
end

demonnic.iGauge.parent = Geyser.Container

function demonnic.iGauge:new(cons, container)
	cons = cons or {}
	cons.type = cons.type or "iGauge"
	local me = self.parent:new(cons, container)
	setmetatable(me, self)
	self.__index = self
		
	me.back = Geyser.Label:new({
		name = me.name ..'_back',
		x = 0, y = 0,
		width = '100%', 
		height = '100%',
	}, me)
	me.front = Geyser.Label:new({
		name = me.name ..'_front', 
		x = 0, y = 0,
		width = '100%', 
		height = '100%',
	}, me.back)  	
	me:setType(me.bartype)
	me:update(me.value, me.fillcolor, me.emptycolor)
	return me
end
</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>GUI</name>
				<packageName></packageName>
				<script>function enable_tooltip(message)
	--echo(message.."\n")
	GUI.TooltipLabel:echo(message)
end

function disable_tooltip(message)
	GUI.TooltipLabel:echo(message)
end

function set_icon(iconName, iconCSS, section_icon, tooltip_value)
  iconURL = 'url("'..getMudletHomeDir():gsub("\\","/")..'/IoMCore/images/static-icons/'..section_icon..'")'
 	GUI[iconCSS]:set("border-image", iconURL)
  GUI[iconName]:setStyleSheet(GUI[iconCSS]:getCSS())
  GUI[iconCSS]:set("border-image", "")

  GUI[iconName]:setOnEnter(
    "enable_tooltip",
    "&lt;b&gt;&lt;font size=\"4\"&gt;" .. tooltip_value .. "&lt;/font&gt;&lt;/b&gt;"
  )
  GUI[iconName]:setOnLeave(
    "disable_tooltip",
    ""
  )
	if not table.contains(GUI.icons, iconName) then
		table.insert(GUI.icons, iconName)
	end
end

function set_greybox(section_value, refCSS, tooltip_value, callback)
	GUI[section_value.."Grey"] =
    Geyser.Label:new(
      {
        name = section_value.."Grey",
        message = "",
				x=0, y=0,
				width=GUI[section_value]:get_width(), height=GUI[section_value.."Icon"]:get_height()
      },
      GUI[section_value]
    )
  	GUI[refCSS]:set("background-color", "rgba(0,0,0,160)")
    GUI[section_value.."Grey"]:setStyleSheet(GUI[refCSS]:getCSS())
    GUI[refCSS]:set("background-color", "rgba(0,0,0,0)")
		GUI[section_value.."Grey"]:setOnEnter(
      "enable_tooltip",
      "&lt;b&gt;&lt;font size=\"4\"&gt;" .. tooltip_value .. "&lt;/font&gt;&lt;/b&gt;"
    )
    GUI[section_value.."Grey"]:setOnLeave(
      "disable_tooltip",
      ""
    )
    GUI[section_value .. "Grey"]:setClickCallback(callback, section_value)
		if not table.contains(GUI.greys, section_value.."Grey") then
  		table.insert(GUI.greys, section_value.."Grey")
  	end
end</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Border and Font Sizes</name>
					<packageName></packageName>
					<script>function GUI.UpdateBorderSizes()
	local w,h = getMainWindowSize()
	-- Only update if window size have changed!
	if( w ~= GUI.window_width or h ~= GUI.window_height ) then
		GUI.window_width = w
		GUI.window_height = h
		
		GUI.button_height = h/20

		local cx = GUI.mainconsole_container:get_x()
		local cy = GUI.mainconsole_container:get_y()
		local cw = GUI.mainconsole_container:get_width()
		local ch = GUI.mainconsole_container:get_height()

		setBorderLeft(tonumber(cx))
		setBorderTop(tonumber(cy))
		setBorderRight(tonumber(w-cx-cw))
		setBorderBottom(tonumber(h-cy-ch))
		
		GUI.UpdateConsoleFontSize()
		GUI.UpdateFontSize()
		return true
	end
	return false
end

function GUI.UpdateConsoleFontSize()
	--MiniConsoleFontSize
	local w,h = getMainWindowSize()
	local defaultWidth = w * 0.2
	local targetWidth = defaultWidth / 40
	local width,height = calcFontSize(GUI.ConsoleFontSize)
	if width &gt; targetWidth then
		GUI.ConsoleFontSize = GUI.ConsoleFontSize - 1
		GUI.UpdateConsoleFontSize()
	elseif width &lt; targetWidth * .6 then
		GUI.ConsoleFontSize = GUI.ConsoleFontSize + 1
		GUI.UpdateConsoleFontSize()	
	end
end

function GUI.UpdateFontSize()
	--FontSize

end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Create Background</name>
					<packageName></packageName>
					<script>function GUI.CreateBackground()
  GUI.BackgroundCSS = CSSMan.new([[
    background-color: rgb(20,0,20);
  ]])
  
  GUI.Right = Geyser.Label:new({
    name = "Right",
    x = "-40%", y = 0,
    width = "40%",
    height = "100%",
  })
  GUI.Right:setStyleSheet(GUI.BackgroundCSS:getCSS())
  
  GUI.Top = Geyser.Label:new({
    name = "Top",
    x = 0, y = 0,
    width = "60%",
    height = "5%",
  })
  GUI.Top:setStyleSheet(GUI.BackgroundCSS:getCSS())
  
  GUI.Bottom = Geyser.Label:new({
    name = "Bottom",
    x = 0, y = "90%",
    width = "60%",
    height = "10%",
  })
  GUI.Bottom:setStyleSheet(GUI.BackgroundCSS:getCSS())
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Create Header</name>
					<packageName></packageName>
					<script>header_sections =
  {
    "Box0",
    "Box1",
    "Box2",
    "Box3",
    "Box4",
    "Box5",
    "Box6",
    "Box7",
    "Box8",
    "Box9",
    "Box10",
    "Box11",
		"Box12",
    "Box12",
    "Box14",
    "Box15",
  }
header_icons =
  {
    "0",
    "1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8",
		"9",
		"10",
		"11",
		"12",
		"13",
		"14",
		"15",
  }
header_tooltips =
  {
    "Score",
    "Key 1",
    "Key 2",
    "Key 3",
    "Key 4",
    "Key 5",
    "Key 6",
    "Key 7",
    "Key 8",
    "Key 9",
    "Key 0",
    "Shift+1",
    "Shift+2",
    "Shift+3",
    "Shift+4",
    "Shift+5",
  }
header_stretch = {1.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}

function GUI.CreateHeader()
  GUI.BoxHeaderCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
  	qproperty-wordWrap: true;
  ]])
  
  -- The icons will be contained here
  GUI.HBoxHeader =
    Geyser.HBox:new(
      {name = "HBoxHeader", x = 0, y = 0, width = "100%", height = "100%"}, GUI.Top
    )
  	
  -- Add the icons and events
  for index = 1, #header_sections do
    local section_value = header_sections[index]
    local icon_value = header_icons[index]
    local tooltip_value = header_tooltips[index]
    local stretch_value = header_stretch[index]
  	
    if section_value ~= "Score" then
      GUI[section_value] =
        GUI[section_value] or
        Geyser.Label:new(
          {
            name = "Top" .. section_value,
            message = "&lt;center&gt;&lt;b&gt;&lt;font size=\""..(GUI.FontSize+2).."\"&gt;" .. icon_value .. "&lt;/font&gt;&lt;/b&gt;",
            h_stretch_factor = stretch_value,
          },
          GUI.HBoxHeader
        )
      GUI[section_value]:setStyleSheet(GUI.BoxHeaderCSS:getCSS())
      GUI[section_value]:setOnEnter(
        "enable_tooltip",
        "&lt;center&gt;&lt;b&gt;&lt;font size=\""..GUI.FontSize.."\"&gt;" .. icon_value .. "&lt;/font&gt;&lt;/b&gt;&lt;br&gt;" .. tooltip_value
      )
      GUI[section_value]:setOnLeave(
        "disable_tooltip",
        "&lt;center&gt;&lt;b&gt;&lt;font size=\""..(GUI.FontSize+2).."\"&gt;" .. icon_value .. "&lt;/font&gt;&lt;/b&gt;"
      )
    else
      GUI[section_value] =
        GUI[section_value] or
        Geyser.Label:new(
          {
            name = "Top" .. section_value,
            message = "&lt;center&gt;&lt;b&gt;&lt;font size=\""..GUI.FontSize.."\"&gt;" .. icon_value .. "&lt;/font&gt;&lt;/b&gt;",
            h_stretch_factor = stretch_value,
          },
          GUI.HBoxHeader
        )
      GUI[section_value]:setStyleSheet(GUI.BoxHeaderCSS:getCSS())
      GUI[section_value]:setOnEnter(
        "enable_tooltip",
        "&lt;center&gt;&lt;b&gt;&lt;font size=\""..GUI.FontSize.."\"&gt;" .. icon_value .. "&lt;/font&gt;&lt;/b&gt;&lt;br&gt;" .. tooltip_value
      )
      GUI[section_value]:setOnLeave(
        "disable_tooltip",
        "&lt;center&gt;&lt;b&gt;&lt;font size=\""..GUI.FontSize.."\"&gt;" .. icon_value .. "&lt;/font&gt;&lt;/b&gt;"
      )
    end
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Create Footer</name>
					<packageName></packageName>
					<script>footer_top_sections =
  {
    "Health",
    "Spell",
    "Endurance",
    "Enemy"
  }
footer_top_icons =
  {
    "health-points.png",
    "spell-points.png",
    "endurance-points.png",
    "enemy-points"
  }
footer_top_colors =
  {
    "red",
    "blue",
    "darkorange",
    "purple"
  }
 footer_top_tooltips =
  {
    "Hp",
    "Sp",
    "Ep",
    "EHp"
  }
	
	
footer_bottom_sections =
  {
    "Room",
    "Area",
    "Exits"
  }

function GUI.CreateFooter()
  GUI.Footer = Geyser.VBox:new({
    name = "Footer",
    x = 0, y = 0,
    width = "100%",
    height = "100%",
  },GUI.Bottom)
  
  GUI.FooterTop = Geyser.Container:new({
    name = "FooterTop",
  },GUI.Footer)
  
  GUI.FooterBottom = Geyser.HBox:new({
    name = "FooterBottom",
  },GUI.Footer)
  
  GUI.GaugeBackCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
    border-style: solid;
    border-color: white;
    border-width: 1px;
    border-radius: 5px;
    margin: 5px;
  ]])
  
  GUI.GaugeFrontCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
    border-style: solid;
    border-color: white;
    border-width: 1px;
    border-radius: 5px;
    margin: 5px;
  ]])
	
	 GUI.BoxFooterCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
  	margin: 2px;
  	qproperty-wordWrap: true;
  	qproperty-alignment: 'AlignBottom';
  ]])
	
	GUI.BoxFooterIconCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
  	margin: 2px;
  	qproperty-wordWrap: true;
  	qproperty-alignment: 'AlignBottom';
  ]])
	
	GUI.BarLabelCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
  	margin: 10px;
  	qproperty-alignment: 'AlignCenter';
  ]])
	
	-- Add the icons and events
  for index = 1, #footer_top_sections do
		local section_value = footer_top_sections[index]
		local section_color = footer_top_colors[index]
    local section_icon = footer_top_icons[index]
    local tooltip_value = footer_top_tooltips[index]
		boxName = "Box" .. section_value
		iconName = boxName .. "Icon"
		boxPos = (index*25)-25
		
    GUI[boxName] =
      GUI[boxName] or
      Geyser.Label:new(
        {
          name = boxName,
          message = "",
          x = boxPos.."%", y = 0,
          width = "5%",
          height = "100%"
        },GUI.FooterTop)
		GUI[boxName]:setStyleSheet(GUI.BoxFooterCSS:getCSS())
				
		GUI[iconName] =
      GUI[iconName] or
      Geyser.Label:new(
        {
          name = iconName,
          message = "",
          x = 0, y = 0,
          height = GUI.button_height,
    			width = GUI.button_height
        },GUI[boxName])
		set_icon(iconName, "BoxFooterIconCSS", section_icon, tooltip_value)
		--GUI[section_value .. "Icon"]:setClickCallback("on_boxfooter_press", section_value)
    		
		barName = tooltip_value .. "Bar"
		
		GUI[barName .. "Wrapper"] =
      GUI[barName .. "Wrapper"] or
      Geyser.Container:new(
        {
          name = barName .. "Wrapper",
          message = "",
          x = (boxPos+5).."%", y = 0,
          width = "20%",
          height = "100%",
        },GUI.FooterTop)		
		
		GUI[barName] =
      GUI[barName] or
      Geyser.Gauge:new(
        {
          name = barName,
          message = "",
          x = 0, y = 0,
          width = "100%",
          height = "100%",
        },GUI[barName.."Wrapper"])
    GUI[barName].back:setStyleSheet(GUI.GaugeBackCSS:getCSS())
    GUI.GaugeFrontCSS:set("background-color",section_color)
    GUI[barName].front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
	
		barLabel = barName.."Label"
		GUI[barLabel] =
      GUI[barLabelame] or
      Geyser.Label:new(
        {
          name = barLabel,
          message = "",
          x = 0, y = 0,
          width = "100%",
          height = "100%"
        },GUI[barName])
		GUI[barLabel]:setStyleSheet(GUI.BarLabelCSS:getCSS())
		
		if not table.contains(GUI.gauges, barName) then
			table.insert(GUI.gauges, barName)
		end
		
		if barName ~= "EHpBar" then GUI[barName]:setValue(math.random(100),100) else
			GUI[barName]:setValue(0,100)
			Character.EHp = 0
			Character.Enemy = "No Enemy"
			GUI[barLabel]:echo("&lt;b&gt;"..Character.Enemy.." ("..Character.EHp.."%)&lt;/b&gt;")
		end
	end
	
	
   
  GUI.BoxRoom = Geyser.Label:new({
    name = "BoxRoom",
  },GUI.FooterBottom)
  GUI.BoxRoom:setStyleSheet(GUI.BoxFooterCSS:getCSS())
  GUI.BoxRoom:echo("&lt;center&gt;&lt;font size=\""..(GUI.FontSize+2).."\"&gt;📍&lt;/font&gt; &lt;b&gt;&lt;font size=\""..GUI.FontSize.."\"&gt;Room&lt;/font&gt;&lt;/b&gt;")
  
  GUI.BoxArea = Geyser.Label:new({
    name = "BoxArea",
  },GUI.FooterBottom)
  GUI.BoxArea:setStyleSheet(GUI.BoxFooterCSS:getCSS())
  GUI.BoxArea:echo("&lt;center&gt;&lt;font size=\""..(GUI.FontSize+2).."\"&gt;🏰&lt;/font&gt; &lt;b&gt;&lt;font size=\""..GUI.FontSize.."\"&gt;Area&lt;/font&gt;&lt;/b&gt;")
  
  GUI.BoxExits = Geyser.Label:new({
    name = "BoxExits",
  },GUI.FooterBottom)
  GUI.BoxExits:setStyleSheet(GUI.BoxFooterCSS:getCSS())
  GUI.BoxExits:echo("&lt;center&gt;&lt;font size=\""..(GUI.FontSize+2).."\"&gt;🚪&lt;/font&gt; &lt;b&gt;&lt;font size=\""..GUI.FontSize.."\"&gt;Exits&lt;/font&gt;&lt;/b&gt;")
end

function update_statusbars()
	GUI.HpBar:setValue(Character.Hp.Current, Character.Hp.Max, "")
	GUI.SpBar:setValue(Character.Sp.Current, Character.Sp.Max, "")
	GUI.EpBar:setValue(Character.Ep.Current, Character.Ep.Max, "")
	
	GUI.HpBarLabel:echo("&lt;b&gt;"..Character.Hp.Current.."/"..Character.Hp.Max.."&lt;/b&gt;")
	GUI.SpBarLabel:echo("&lt;b&gt;"..Character.Sp.Current.."/"..Character.Sp.Max.."&lt;/b&gt;")
	GUI.EpBarLabel:echo("&lt;b&gt;"..Character.Ep.Current.."/"..Character.Ep.Max.."&lt;/b&gt;")
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Create Right</name>
					<packageName></packageName>
					<script>function GUI.CreateRight()
  GUI.BoxRightCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
  	qproperty-wordWrap: true;
  ]])
  
  GUI.BoxCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
    border-style: solid;
    border-width: 1px;
    border-radius: 5px;
    border-color: white;
    margin: 2px;
  ]])
	
	GUI.ProgressLabelCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
		color: rgbs(255,255,255,255)
  	qproperty-wordWrap: true;
		qproperty-alignment: 'AlignTop | AlignLeft';
		padding: 5px;
  ]])
	
	GUI.MoneyLabelCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
		color: rgbs(255,255,255,255)
  	qproperty-wordWrap: true;
		qproperty-alignment: 'AlignLeft | AlignTop';
		padding: 5px;
  ]])
	
	GUI.MoneyBoxCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
  ]])
	
	GUI.TooltipLabelCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
  	qproperty-wordWrap: true;
		qproperty-alignment: 'AlignLeft | AlignTop';
		padding: 5px;
  ]])
	
end</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Create Chat</name>
						<packageName></packageName>
						<script>chat_sections =
  {
		"BoxChatAll", 
		"BoxChatCustom",
		"BoxChatTells", 
		"BoxChatParty", 
		"BoxChatMailbox", 
		"BoxChatSettings"
		}
chat_icons = 
	{
		"chat-all.png", 
		"chat-custom.png", 
		"chat-raven.png", 
		"chat-party.png", 
		"chat-mailbox.png", 
		"chat-settings.png"
	}
chat_tooltips = 
	{
		"All", 
		"Custom", 
		"Tells", 
		"Party", 
		"Mailbox", 
		"Chat Settings"
	}
chat_consoles =
  {
    "ChatAllConsole",
    "ChatCustomConsole",
    "ChatTellsConsole",
    "ChatPartyConsole",
    "ChatMai1boxConsole",
    "ChatSettingsConsole"
  }

function on_chat_box_press(section)

  for index = 1, #chat_sections do
    local section_value = chat_sections[index]
    local console_value = chat_consoles[index]
		
    if section_value == section then
      GUI.CurrentChat = section
			if index ~= #chat_sections then GUI[console_value]:show() end
			GUI[section_value.."Grey"]:hide()
    else
      if index ~= #chat_sections then GUI[console_value]:hide() end
			GUI[section_value.."Grey"]:show()
    end
  end
end

function GUI.CreateChat()
  GUI.BoxChatButtonCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
    border-style: solid;
    border-color: #31363b;
    border-width: 1px;
		qproperty-alignment: 'AlignBottom|AlignMiddle';
  ]])
  
  -- The icons will be contained here
  GUI.HBoxChat =
    Geyser.HBox:new({name = "HBoxChat", x = 0, y = 0, width = "50%", height = "5%"}, GUI.Right)
  	
  -- Add the icons and events
  for index = 1, #chat_sections do
    local section_value = chat_sections[index]
    local section_icon = chat_icons[index]
    local tooltip_value = chat_tooltips[index]
  	
		GUI[section_value] =
    Geyser.Label:new(
      {
        name = section_value,
        message = ""
      },
      GUI.HBoxChat
    )
		GUI[section_value]:setStyleSheet(GUI.BoxChatButtonCSS:getCSS())
		
   	GUI[section_value.."Icon"] =
    Geyser.Label:new(
      {
        name = section_value.."Icon",
        message = "",
				x=0, y=0,
				width=GUI.button_height, height=GUI.button_height
      },
      GUI[section_value]
    )
		set_icon(section_value.."Icon", "BoxRightCSS", section_icon, tooltip_value)
		GUI[section_value .. "Icon"]:setClickCallback("on_chat_box_press", section_value)
		set_greybox(section_value, "BoxRightCSS", tooltip_value, "on_chat_box_press")
  end
  
  -- The consoles will be contained here
  GUI.ChatBox =
    Geyser.Label:new(
      {name = "ChatBox", x = 0, y = "5%", width = "50%", height = "40%"}, GUI.Right
    )
  GUI.ChatBox:setStyleSheet(GUI.BoxRightCSS:getCSS())
  
  -- Add the consoles
  for index = 1, #chat_sections - 1 do
    local console_value = chat_consoles[index]
		if not table.contains(GUI.consoles, console_value) then
  		table.insert(GUI.consoles, console_value)
  	end  	
    GUI[console_value] =
      GUI[console_value] or
      Geyser.MiniConsole:new(
        {
          name = console_value,
          x = GUI.ChatBox:get_x()+tonumber(string.format("%.0f", GUI.ChatBox:get_width()*0.02)),
          y = GUI.ChatBox:get_y()+tonumber(string.format("%.0f", GUI.ChatBox:get_width()*0.02)),
          height = GUI.ChatBox:get_height()-tonumber(string.format("%.0f", GUI.ChatBox:get_width()*0.02)),
          width = GUI.ChatBox:get_width()-tonumber(string.format("%.0f", GUI.ChatBox:get_width()*0.02))
        }
      )
    setBackgroundColor(console_value, 0, 0, 0, 0)
    setMiniConsoleFontSize(console_value, GUI.ConsoleFontSize)
    setFgColor(console_value, 192, 192, 192)
    setBgColor(console_value, 0, 0, 0)
    GUI[console_value]:enableAutoWrap()
    GUI[console_value]:hide()
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Create Content</name>
						<packageName></packageName>
						<script>content_sections =
  {
		"BoxCharacter", 
		"BoxCombat", 
		"BoxEquipment", 
		"BoxQuickwalk", 
		"BoxMap", 
		"BoxInfo"
	}
content_icons = 
	{
		"content-character.png", 
		"content-combat.png", 
		"content-equipment.png", 
		"content-quickwalk.png", 
		"content-map.png", 
		"content-info.png"
	}
content_tooltips = {"Score", "Combat", "Equipment", "Quickwalk", "Map", "Info"}
content_consoles =
  {
    "CharacterConsole",
    "CombatConsole",
    "EquipmentConsole",
    "QuickwalkConsole",
    "MapperConsole",
    "InfoConsole"
  }

function on_content_box_press(section)
  for index = 1, #content_sections do
    local section_value = content_sections[index]
    local console_value = content_consoles[index]
		local delay = delay or GUI.TabTimersDelay
				
    if section_value == section then
			if section == "CharacterConsole" then
				render_console("CharacterConsole", content_body["CharacterConsole"])
				delay  = TabTimersDelay * 6
			end
			GUI.CurrentContent = section
      GUI[console_value]:show()
			GUI[section_value.."Grey"]:hide()
			startTabTimer(console_value, delay)
    else
      GUI[console_value]:hide()
			GUI[section_value.."Grey"]:show()
			killTabTimer(console_value)
    end
  end
end

function GUI.CreateContent()
  GUI.BoxContentButtonCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
    border-style: solid;
    border-color: #31363b;
    border-width: 1px;
		qproperty-alignment: 'AlignBottom';
  ]])
  
  -- The icons will be contained here
  GUI.HBoxContent =
    Geyser.HBox:new(
      {name = "HBoxContent", x = 0, y = "45%", width = "50%", height = "5%"}, GUI.Right
    )
  	
  -- Add the icons and events
  for index = 1, #content_sections do
    local section_value = content_sections[index]
    local section_icon = content_icons[index]
    local tooltip_value = content_tooltips[index]
  	
		GUI[section_value] =
    Geyser.Label:new(
      {
        name = section_value,
        message = ""
      },
      GUI.HBoxContent
    )
		GUI[section_value]:setStyleSheet(GUI.BoxChatButtonCSS:getCSS())
		
    GUI[section_value.."Icon"] =
      Geyser.Label:new(
        {
          name = section_value.."Icon",
          message = "",
					x=3, y=0,
					width=GUI.button_height, height=GUI.button_height
        },
        GUI[section_value]
      )
  	set_icon(section_value.."Icon", "BoxRightCSS", section_icon, tooltip_value)
		GUI[section_value .. "Icon"]:setClickCallback("on_content_box_press", section_value)
		set_greybox(section_value, "BoxRightCSS", tooltip_value, "on_content_box_press")
  end
  
  -- The consoles will be contained here
  GUI.ContentBox =
    Geyser.Label:new(
      {name = "ContentBox", x = 0, y = "50%", width = "50%", height = "40%"}, GUI.Right
    )
  GUI.ContentBox:setStyleSheet(GUI.BoxRightCSS:getCSS())
  
  -- Add the consoles (except the Mapper, because it is so special)
  for index = 1, #content_sections do
    local console_value = content_consoles[index]
		if not table.contains(GUI.consoles, console_value) then
  		table.insert(GUI.consoles, console_value)
  	end
    if console_value ~= "MapperConsole" then
		  GUI[console_value] =
        GUI[console_value] or
        Geyser.MiniConsole:new(
          {
            name = console_value,
            x = GUI.ContentBox:get_x()+tonumber(string.format("%.0f", GUI.ContentBox:get_width()*0.02)),
            y = GUI.ContentBox:get_y()+tonumber(string.format("%.0f", GUI.ContentBox:get_width()*0.02)),
            height = GUI.ContentBox:get_height()-tonumber(string.format("%.0f", GUI.ContentBox:get_width()*0.02)),
            width = GUI.ContentBox:get_width()-tonumber(string.format("%.0f", GUI.ContentBox:get_width()*0.02))
          }
        )
			setBackgroundColor(console_value, 0, 0, 0, 0)
      setMiniConsoleFontSize(console_value, GUI.ConsoleFontSize)
      setFgColor(console_value, 192, 192, 192)
      setBgColor(console_value, 0, 0, 0)
      GUI[console_value]:enableAutoWrap()
			-- Add each section's internals
			render_console(console_value, content_body[console_value])
      GUI[console_value]:hide()
		end
  end  	
end

content_body = content_body or {
 CharacterConsole = {
 	function(console_value)
		local newString =  {}
		if Character.Name ~= "" and Character.Surname ~= "" then
			table.insert(newString, string.format("&lt;$header&gt;%s %s&lt;reset&gt;", Character.Name, Character.Surname))
		else
			table.insert(newString, string.format("&lt;$header&gt;%s&lt;reset&gt;", Character.Name))
		end
	
		if Character.Title ~= "" and Character.GuildName ~= "" then
			table.insert(newString, string.format("&lt;$item&gt; %-6s: %s\n %6s: %s&lt;reset&gt;", "Title", Character.Title, "Guild", Character.GuildName))
		elseif Character.Title ~= "" then
			table.insert(newString, string.format("&lt;$item&gt; %-6s: %s&lt;reset&gt;", "Title", Character.Title))
		elseif Character.GuildName ~= "" then
			table.insert(newString, string.format("&lt;$item&gt; %-6s: %s&lt;reset&gt;", "Guild", Character.GuildName))
		end  		
		table.insert(newString, string.format("&lt;$item&gt; %-6s: &lt;$value&gt;%s&lt;reset&gt;", "Race", Character.Race))
		if Character.OpenLevels &gt; 0 then
			table.insert(newString, string.format(
				"&lt;$item&gt; %-6s: &lt;$value&gt;%-i&lt;$item&gt; (&lt;$bonus&gt;%i&lt;$item&gt; Open Levels)&lt;reset&gt;",  
				"Level", Character.Level, Character.OpenLevels
				)
			)
		else
			table.insert(newString, string.format("&lt;$item&gt; %-6s: &lt;$value&gt;%i&lt;reset&gt;",  "Level", Character.Level))
		end
		local hungerValue = lookupHunger(Character.Hunger)
		local hungerColor = "&lt;"..lookupHungerColor(Character.Hunger).."&gt;"
		local alignColor = "&lt;"..GUI.Lookup.AlignColors[Character.Alignment].."&gt;"
		table.insert(newString, string.format(
			"&lt;$item&gt; %-6s: %s%s\n&lt;$item&gt; %-6s: %s%s (%3s%%)&lt;reset&gt;", 
			"Align.", alignColor, GUI.Lookup.Alignment[Character.Alignment], "Hunger", hungerColor or "", hungerValue or "", Character.Hunger
			)
		)
		GUI[console_value]:cecho(string.gsub(table.concat(newString, "\n"), "%$([%w_]+)", GUI.colors).."\n")
	end,
	function(console_value)
		local newString =  {}
		table.insert(newString, string.format("&lt;$subheader&gt;%-16s%-16s&lt;reset&gt;", "STATS", "TRAITS"))
		local stats = {"Str", "Dex", "Con", "Sta", "Int", "Wis", "Cha"}
		local traitKeys = {"AC", "Wimpy", "Poisoned", "Hiding", "Growth","Height", "Weight"}
		for index = 1, #stats do
			local stat = stats[index]
			local trait = traitKeys[index]
			local statObj = Character.Stats[stat]
			
			if statObj.Current == statObj.Base then bonusStr = "&lt;$value&gt;+0"
			elseif statObj.Current &gt; statObj.Base then 
				bonusStr = "&lt;$bonus&gt;+"..(statObj.Current - statObj.Base)
			else bonusStr = "&lt;$penalty&gt;-"..(statObj.Base - statObj.Current) end

			
			local tColors = {
				["AC"] = "&lt;"..GUI.Lookup.ACColors[Character.AC].."&gt;",
				["Wimpy"] = "&lt;$value&gt;",
				["Poisoned"] = "&lt;"..GUI.Lookup.PoisonedColors[Character.Poisoned].."&gt;",
				["Hiding"] = "&lt;$value&gt;",
				["Growth"] = "&lt;yellow&gt;",
				["Height"] = "&lt;$value&gt;",
				["Weight"] = "&lt;$value&gt;",
			}
			local tColor = tColors[trait]
			local tValue = Character[trait]
			local tWord = tValue
			if GUI.Lookup[trait] ~= nil then
				tWord = GUI.Lookup[trait][tValue]
			elseif trait == "Height" then
				tWord = Character.Height	
			end
			local t =  string.format(" %-8s: ", trait)
			local str = "&lt;$item&gt;%4s: &lt;$value&gt;%-3s &lt;$item&gt;(%2s&lt;$item&gt;)  "
			if trait == "Hiding" then 
				str = str..t.."%s%s&lt;$item&gt; (&lt;$value&gt;%3s%%&lt;$item&gt;)"
			elseif trait == "Wimpy" then
				str = str..t.."%s%s%%&lt;reset&gt;"
			elseif trait == "Weight" then
				str = str..t.."%s%s lb&lt;reset&gt;"
			else
				str = str..t.."%s%s&lt;reset&gt;"
			end
			if trait ~= "Hiding" then
				table.insert(newString, string.format(str, stat, statObj.Current, bonusStr, tColor, tWord))
			else
				table.insert(newString, string.format(str, stat, statObj.Current, bonusStr, tColor, tWord, Character.Stealth))
			end
		end
		GUI[console_value]:cecho(string.gsub(table.concat(newString, "\n"), "%$([%w_]+)", GUI.colors).."\n")
	end,
	function(console_value)
		local newString =  {}
		table.insert(newString, string.format("&lt;$subheader&gt;%s&lt;reset&gt;", "GUILDS"))
		
		local guildTiers = {"alpha", "gamma", "bravo", "omicron"}
		for index = 1, #guildTiers do
  		local tier = guildTiers[index]
  		local str = string.format("&lt;$item&gt; %-7s: &lt;$value&gt;", tier)
  		local i = 0
			if Character.Guilds[tier] ~= nil then
  			local tierGuilds = Character.Guilds[tier]
    		for k,v in pairs(tierGuilds) do
    			str = str..firstToUpper(k).." ("..v..")"
    			if i &lt; #Character.Guilds[tier] then str = str..", " end
  			end
			end
			str = str.."&lt;reset&gt;"
			table.insert(newString, str)
		end
		GUI[console_value]:cecho(string.gsub(table.concat(newString, "\n"), "%$([%w_]+)", GUI.colors).."\n")
	end
	},
	CombatConsole = {
	
	}
}</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Create Menu</name>
						<packageName></packageName>
						<script>menu_sections = 
	{
		"BoxAbilities", 
		"BoxInventory", 
		"BoxParty",
		"BoxProgress",
		"BoxConfig", 
		"BoxHelp"
	}
menu_icons = 
	{
		"menu-abilities.png", 
		"menu-inventory.png", 
		"menu-party.png",
		"menu-progress.png",
		"menu-config.png", 
		"menu-help.png"
	}
menu_tooltips = 
	{
		"Abilities (Skills/Spells)", 
		"Inventory", 
		"Party Status",
		"Progress (Exp/Gold/Rewards)",
		"Hotkey Configuration", 
		"Help Topics"
		}
menu_consoles =
  {
		"AbilitiesConsole", 
		"InventoryConsole", 
		"PartyConsole", 
		"ProgressContainer",
		"ConfigConsole", 
		"HelpContainer"
	}

progress_sections = 
	{
		"Gold",
		"Bank",
		"Exp",
		"NextAdvLevel",
		"NextGuildLevel",
		"Kills",
		"Rooms",
		"MudPercent",
		"NextReward",
		"TaskPoints"
	}
progress_icons = 
	{
		"money-coins.png",
		"progress-bank.png",
		"money-exp.png",
		"progress-adv.png",
		"progress-guild.png",
		"progress-kills.png",
		"progress-rooms.png",
		"progress-mudpercent.png",
		"progress-nextreward.png",
		"progress-taskpoints.png"
	}
progress_tooltips = 
	{
		"Current Gold", 
		"Gold in Bank",
		"Current Experience", 
		"To Next Adventurer Level",
		"To Next Guild Level",
		"Total Kills",
		"Rooms Explored",
		"% of Mud Explored",
		"% to next Exploration Reward",
		"Task Points",
	}
	
function on_menu_box_press(section)
  for index = 1, #menu_sections do
    local section_value = menu_sections[index]
    local console_value = menu_consoles[index]
		local delay = GUI.TabTimersDelay
		
    if section_value == section then
			if section == "BoxAbilities" then
				delay = GUI.TabTimersDelay * 3
				render_console("AbilitiesConsole", menu_body["AbilitiesConsole"] )
			elseif section == "BoxInventory" then
				render_console("InventoryConsole", menu_body["InventoryConsole"] )
			elseif section == "BoxParty" then
				delay = GUI.TabTimersDelay / 2
			elseif section == "BoxProgress" then
				if GUI.NextAdvLevelBar then GUI.NextAdvLevelBar:show() end
				if GUI.NextGuildLevelBar then GUI.NextGuildLevelBar:show() end
			end
			GUI.CurrentMenu = section
      GUI[console_value]:show()
			GUI[section_value.."Grey"]:hide()
			startTabTimer(console_value, delay)
    else
      GUI[console_value]:hide()
			GUI[section_value.."Grey"]:show()
			killTabTimer(console_value)
    end
  end
	if section ~= "BoxProgress" then
		if GUI.NextAdvLevelBar then GUI.NextAdvLevelBar:hide() end
		if GUI.NextGuildLevelBar then GUI.NextGuildLevelBar:hide() end
	end
end

function GUI.CreateMenu()
  GUI.BoxMenuButtonCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
    border-style: solid;
    border-color: #31363b;
    border-width: 1px;
  ]])
  
  -- The icons will be contained here
  GUI.HBoxMenu =
    Geyser.HBox:new(
      {name = "HBoxMenu", x = "50%", y = 0, width = "50%", height = "5%"}, GUI.Right
    )
    
  -- Add the icons and events
  for index = 1, #menu_sections do
    local section_value = menu_sections[index]
    local section_icon = menu_icons[index]
    local tooltip_value = menu_tooltips[index]
		
		GUI[section_value] =
      Geyser.Label:new(
        {
          name = section_value,
          message = "",
        },
        GUI.HBoxMenu
      )
		GUI[section_value]:setStyleSheet(GUI.BoxMenuButtonCSS:getCSS())
    
    GUI[section_value.."Icon"] =
      Geyser.Label:new(
        {
          name = section_value.."Icon",
          message = "",
					x=0, y=0,
					width=GUI.button_height, height=GUI.button_height
        },
        GUI[section_value]
      )
		set_icon(section_value.."Icon", "BoxMenuButtonCSS", section_icon, tooltip_value)
		GUI[section_value .. "Icon"]:setClickCallback("on_menu_box_press", section_value)
		set_greybox(section_value, "BoxRightCSS", tooltip_value, "on_menu_box_press")		
  end
  
  -- The consoles will be contained here
  GUI.MenuBox =
    Geyser.Label:new(
      {name = "MenuBox", x = "50%", y = "5%", width = "50%", height = "90%"}, GUI.Right
    )    
  GUI.MenuBox:setStyleSheet(GUI.BoxRightCSS:getCSS())
  
  -- Add the consoles (and containers)
  for index = 1, #menu_consoles do
    local console_value = menu_consoles[index]
    if not table.contains(GUI.consoles, console_value) then
  		table.insert(GUI.consoles, console_value)
  	end
    if console_value ~= "HelpContainer" and console_value ~= "ProgressContainer"  then
      GUI[console_value] =
        GUI[console_value] or
        Geyser.MiniConsole:new(
          {
            name = console_value,
            x = GUI.MenuBox:get_x()+tonumber(string.format("%.0f", GUI.MenuBox:get_width()*0.02)),
            y = GUI.MenuBox:get_y()+tonumber(string.format("%.0f", GUI.MenuBox:get_width()*0.02)),
            height = GUI.MenuBox:get_height()-tonumber(string.format("%.0f", GUI.MenuBox:get_width()*0.02)),
            width = GUI.MenuBox:get_width()-tonumber(string.format("%.0f", GUI.MenuBox:get_width()*0.02))
          }
        )
      setBackgroundColor(console_value, 0, 0, 0, 0)
      setMiniConsoleFontSize(console_value, GUI.ConsoleFontSize)
      setFgColor(console_value, 192, 192, 192)
      setBgColor(console_value, 0, 0, 0)
      GUI[console_value]:enableAutoWrap()
      GUI[console_value]:hide()
		elseif console_value == "ProgressContainer" then
			--Progress Menu 
    	GUI.ProgressContainer =
      Geyser.Container:new(
        {name = "ProgressContainer", 
    			x = GUI.MenuBox:get_x()+tonumber(string.format("%.0f", GUI.MenuBox:get_width()*0.02)),
          y = GUI.MenuBox:get_y()+tonumber(string.format("%.0f", GUI.MenuBox:get_width()*0.02)),
          height = GUI.MenuBox:get_height()-tonumber(string.format("%.0f", GUI.MenuBox:get_width()*0.02)),
          width = GUI.MenuBox:get_width()-tonumber(string.format("%.0f", GUI.MenuBox:get_width()*0.02))
        }
      )
    	
    	GUI.VBoxProgress =
      Geyser.VBox:new(
        {name = "VBoxProgress", 
    		x = "0%", y = "0%",
    		width = "90%", height = "90%"
				}, GUI.ProgressContainer
      )
    	GUI.do_progress_build(progress_sections, progress_icons, progress_tooltips)	
    	GUI.ProgressContainer:hide()
    else
      GUI[console_value] =
        GUI[console_value] or
        Geyser.Container:new(
          {
            name = console_value,
            x = GUI.MenuBox:get_x(),
            y = GUI.MenuBox:get_y(),
            height = GUI.MenuBox:get_height(),
            width = GUI.MenuBox:get_width()
          }
        )      
			setBackgroundColor(console_value, 0, 0, 0, 0)
			GUI[console_value]:hide()
    end
  end
end

function GUI.do_progress_build(sections, icons, tooltips)
	for index = 1, #sections do
		local section_value = sections[index]
    local section_icon = icons[index]
    local tooltip_value = tooltips[index]
  	

		GUI[section_value.."Container"] =
    Geyser.Label:new(
      {
        name = section_value.."Container",
        message = "",
				x = 0, y = 0,
				height =  GUI.button_height+6,
    		width = "100%"
      },
      GUI.VBoxProgress
    )
		GUI[section_value.."Container"]:setStyleSheet(GUI.MoneyBoxCSS:getCSS())
		
		GUI["Box"..section_value] =
    Geyser.Label:new(
      {
        name = "Box"..section_value,
        message = "",
				x = 3, y = 3,
				height = GUI.button_height,
    		width = GUI.button_height
      },
      GUI[section_value.."Container"]
    )
		GUI["Box"..section_value]:setStyleSheet(GUI.MoneyBoxCSS:getCSS())
		
    GUI["Box"..section_value .. "Icon"] =
    Geyser.Label:new(
      {
        name = "Box"..section_value .. "Icon",
        message = "",
				x = 0, y = 0,
				height = GUI.button_height,
    		width = GUI.button_height
      },
      GUI["Box"..section_value]
    )
  	set_icon("Box"..section_value.."Icon", "BoxMenuButtonCSS", section_icon, tooltip_value)
    GUI["Box"..section_value .. "Icon"]:setClickCallback("on_progress_box_press", section_value)
		
		if section_value == "NextAdvLevel" or section_value == "NextGuildLevel" then			
	
			barName = section_value .. "Bar"
			section_color = "gold"
  		GUI[barName.."Wrapper"] =
        GUI[barName .. "Wrapper"] or
        Geyser.Container:new(
          {
            name = barName.."Wrapper",
            message = "",
            x = "20%", y = "5%",
            width = "80%",
            height = "100%"
          },GUI[section_value.."Container"])
			
			GUI[barName] =
        GUI[barName] or
        Geyser.Gauge:new(
          {
            name = barName,
            message = "",
            x = "0%", y = "0%",
            width = "100%",
            height = "40%"
          },GUI[barName .. "Wrapper"])
      GUI[barName].back:setStyleSheet(GUI.GaugeBackCSS:getCSS())
      GUI.GaugeFrontCSS:set("background-color",section_color)
      GUI[barName].front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())		
			GUI[barName]:hide()
			
			GUI[section_value .. "Value"] =
     	Geyser.Label:new(
        {
          name = section_value .. "Value",
          message = string.format("&lt;b&gt;&lt;font size=\""..GUI.FontSize.."\"&gt;%9s %s&lt;/font&gt;&lt;/b&gt;", 0, section_value),
  				x = "0%", y = "30%",
  				height="70%", width="100%"
        },
        GUI[barName.."Wrapper"]
      )
  		GUI[section_value .. "Value"]:setStyleSheet(GUI.ProgressLabelCSS:getCSS())
			
  		if not table.contains(GUI.gauges, barName) then
  			table.insert(GUI.gauges, barName)
  		end
    else
			GUI[section_value .. "Value"] =
     	Geyser.Label:new(
        {
          name = section_value .. "Value",
          message = string.format("&lt;b&gt;&lt;font size=\""..GUI.FontSize.."\"&gt;%9s %s&lt;/font&gt;&lt;/b&gt;", 0, section_value),
  				x = "20%", y = "0%",
  				height="100%", width="80%"
        },
        GUI[section_value.."Container"]
      )
  		GUI[section_value .. "Value"]:setStyleSheet(GUI.ProgressLabelCSS:getCSS())
		end
  end
		GUI["ProgressFillContainer1"] =
  Geyser.Label:new(
    {
      name = "ProgressFillContainer1",
      message = "",
			x = 0, y = 0,
			height =  "100%",
  		width = "100%"
    },
    GUI.VBoxProgress
  )
	GUI["ProgressFillContainer1"]:setStyleSheet(GUI.MoneyBoxCSS:getCSS())
	
	GUI["ProgressFillContainer2"] =
  Geyser.Label:new(
    {
      name = "ProgressFillContainer2",
      message = "",
			x = 0, y = 0,
			height =  "100%",
  		width = "100%"
    },
    GUI.VBoxProgress
  )
	GUI["ProgressFillContainer2"]:setStyleSheet(GUI.MoneyBoxCSS:getCSS())
	
end

function render_progress()
	for index = 1, #progress_sections do
		local section_value = progress_sections[index]
		--echo("Rendering "..section_value.."\n")
		GUI[section_value .. "Value"]:echo(string.format("&lt;b&gt;&lt;font size=\""..GUI.FontSize.."\"&gt;%s&lt;/font&gt;&lt;/b&gt;", progressValue(section_value)()))
	end
	GUI.NextAdvLevelBar:setValue(Character.Exp.Current, Character.Exp.NextAdvLevel, "")
	GUI.NextGuildLevelBar:setValue(Character.Exp.Current, Character.Exp.NextGuildLevel, "")
	
	GUI["CurrentGoldValue"]:echo(string.format("&lt;b&gt;&lt;font size=\""..GUI.FontSize.."\"&gt;%10s %-10s&lt;br&gt;&lt;/font&gt;&lt;/b&gt;", format_num(Character.Gold.Current, 0), "Gold"))
	GUI["CurrentExpValue"]:echo(string.format("&lt;b&gt;&lt;font size=\""..GUI.FontSize.."\"&gt;%10s %-10s&lt;br&gt;( %0.1f%% )&lt;/font&gt;&lt;/b&gt;", format_num(Character.Exp.Current, 0), "Exp", (Character.Exp.Current/Character.Exp.NextGuildLevel)*100))
end

function progressValue(section)
	local progress_handlers = 
	{
		Gold = function() return format_num(Character.Gold.Current, 0).." Gold on hand" end,
		Bank = function() return format_num(Character.Gold.Bank, 0).." Gold in bank" end ,
		Exp = function() return format_num(Character.Exp.Current, 0).." Experience" end,
		NextAdvLevel = function()
			local str = string.format("%s ( %0.3f%% )", format_num(Character.Exp.Current, 0).."/"..format_num(Character.Exp.NextAdvLevel, 0), (Character.Exp.Current/Character.Exp.NextAdvLevel)*100 )
			return str
		end ,
		NextGuildLevel = function()
			local str = string.format("%s ( %0.3f%% )", format_num(Character.Exp.Current, 0).."/"..format_num(Character.Exp.NextGuildLevel, 0), (Character.Exp.Current/Character.Exp.NextGuildLevel)*100)
			return str
		end ,
		Kills = function() return format_num(Character.Kills, 0).." Kills" end ,
		Rooms = function() return format_num(Character.Explored.Rooms, 0).." Rooms Explored" end,
		MudPercent = function() return Character.Explored.MudPercent.."% of Mud Explored" end,
		NextReward = function() return Character.Explored.NextReward.."% to Next Award" end,
		TaskPoints = function() return Character.TaskPoints.." Task Points" end		
	}
	
	return progress_handlers[section]
end

menu_body = menu_body or {
 AbilitiesConsole = {
 	function(console_value)
		local newString = string.format("&lt;$header&gt;..--==| &lt;$bonus&gt;%s&lt;$header&gt; |==--..&lt;reset&gt;", "SKILLS")
		GUI[console_value]:cecho(string.gsub(newString, "%$([%w_]+)", GUI.colors).."\n")		
		gRanks = {[1] = "alpha", [2] = "gamma", [3] = "bravo", [4] = "omicron"}
  	for r = 1, #gRanks do
			local rank = gRanks[r]
			if Character.Guilds[rank] then
				local gKeys = table.keys(Character.Guilds[rank])
				for i = 1, #gKeys do
    			local guild = gKeys[i]
					newString = string.format("&lt;$header&gt; -=-=-| &lt;$value&gt;%s&lt;$header&gt; |-=-=-&lt;reset&gt;", firstToUpper(guild))
					GUI[console_value]:cecho(string.gsub(newString, "%$([%w_]+)", GUI.colors).."\n")
  				local sKeys = {}
					local names = Character.Skills[guild]
					if names then
						for k in pairs(names) do table.insert(sKeys, k) end
  					table.sort(sKeys)
      			for s = 1, #sKeys do
      				local name = sKeys[s]
      				local percent = Character.Skills[guild][name]
							newString = string.format("&lt;$value&gt;%4s%% &lt;$item&gt;| &lt;reset&gt;", percent)
							GUI[console_value]:cecho(string.gsub(newString, "%$([%w_]+)", GUI.colors))
							GUI[console_value]:setUnderline(true)
            	GUI[console_value]:fg(GUI.colors.item)
            	GUI[console_value]:echoPopup(string.format("%s\n", name),
								{
									[[send("help skill ]]..name..[[", true)]], 
									[[send("use ]]..name..[[")]]
								}, {
									"Help", 
									"Use"
								}, true)
            	GUI[console_value]:setUnderline(false)
            	GUI[console_value]:fg(GUI.colors.value)
      			end
					end	
    		end
			end
		end
	end,
	 function(console_value)
		local newString = string.format("\n&lt;$header&gt;..--==| &lt;$bonus&gt;%s&lt;$header&gt; |==--..&lt;reset&gt;", "SPELLS")
		GUI[console_value]:cecho(string.gsub(newString, "%$([%w_]+)", GUI.colors).."\n")		
		gRanks = {[1] = "alpha", [2] = "gamma", [3] = "bravo", [4] = "omicron"}
  	for r = 1, #gRanks do
			local rank = gRanks[r]
			if Character.Guilds[rank] then
				local gKeys = table.keys(Character.Guilds[rank])
				for i = 1, #gKeys do
    			local guild = gKeys[i]
					newString = string.format("&lt;$header&gt; -=-=-| &lt;$value&gt;%s&lt;$header&gt; |-=-=-&lt;reset&gt;", firstToUpper(guild))
					GUI[console_value]:cecho(string.gsub(newString, "%$([%w_]+)", GUI.colors).."\n")
  				local sKeys = {}
					local names = Character.Spells[guild]
					if names then
						for k in pairs(names) do table.insert(sKeys, k) end
  					table.sort(sKeys)
      			for s = 1, #sKeys do
      				local name = sKeys[s]
      				local percent = Character.Spells[guild][name]
							newString = string.format("&lt;$value&gt;%4s%% &lt;$item&gt;| &lt;reset&gt;", percent)
							GUI[console_value]:cecho(string.gsub(newString, "%$([%w_]+)", GUI.colors))
							GUI[console_value]:setUnderline(true)
            	GUI[console_value]:fg(GUI.colors.item)
            	GUI[console_value]:echoPopup(string.format("%s\n", name),
								{
									[[send("help spell ]]..name..[[", true)]], 
									[[send("cast ]]..name..[[")]]
								}, {
									"Help", 
									"Use"
								}, true)
            	GUI[console_value]:setUnderline(false)
            	GUI[console_value]:fg(GUI.colors.value)
      			end
					end	
    		end
			end
		end
	end,
	},
	InventoryConsole = {
 	function(console_value)
		local inv_commands = 
		{
			[[GUI.InventoryHideEq = true
				refreshInventory()]],
			[[GUI.InventoryHideEq = false
				refreshInventory()]]
		}
		local inv_tooltips = 
		{
			"[Click] Hide Eq",
			"[R-Click] Show Eq"
		}
		GUI[console_value]:setBold(false)
		GUI[console_value]:setUnderline(true)
		GUI[console_value]:fg(GUI.colors.item)
		GUI[console_value]:echoPopup("Inventory",
			inv_commands,
			inv_tooltips,
			true
		)
		GUI[console_value]:setBold(true)
		GUI[console_value]:echoPopup(" [Kept] ",
			inv_commands,
			inv_tooltips,
			true
		)
		GUI[console_value]:setBold(false)
		GUI[console_value]:fg(GUI.colors.eq_item)
		local eqText = ""
		if GUI.InventoryHideEq == true then eqText = "[Eq-hidden]"
		else eqText = "[Eq]" end
		GUI[console_value]:echoPopup(eqText.."\n",
			inv_commands,
			inv_tooltips,
			true
		)
    resetFormat()
		GUI[console_value]:cecho(string.gsub(string.format("&lt;$item&gt;Weight: You[&lt;cyan&gt;%4i&lt;$item&gt;] + EQ[&lt;cyan&gt;%4i&lt;$item&gt;] =&lt;reset&gt;", Character.Weight, Character.InventoryWeight), "%$([%w_]+)", GUI.colors).."\n")
		GUI[console_value]:cecho(string.gsub(string.format("&lt;$item&gt;Total[&lt;cyan&gt;%4i&lt;$item&gt;], Capacity[&lt;%s&gt;%3i%%&lt;$item&gt;]&lt;reset&gt;", Character.Weight+Character.InventoryWeight, lookupCapacityColor(Character.InventoryCapacity), Character.InventoryCapacity), "%$([%w_]+)", GUI.colors).."\n")

		local sKeys = {"General items", "Gems", "Armors", "Weapons"}
		for k in pairs(Character.Inventory) do
			if not table.contains(sKeys, k) then table.insert(sKeys, k) end
		end
		for s = 1, #sKeys do
			local section = sKeys[s]
			if Character.Inventory[section] and #Character.Inventory[section] &gt; 0 then
				GUI[console_value]:cecho("      ")
				GUI[console_value]:setFgColor(
					Character.InventoryHeadersFg[section]["r"], 
					Character.InventoryHeadersFg[section]["g"],
					Character.InventoryHeadersFg[section]["b"]	
				)
				GUI[console_value]:setBgColor(
					Character.InventoryHeadersBg[section]["r"], 
					Character.InventoryHeadersBg[section]["g"],
					Character.InventoryHeadersBg[section]["b"]	
				)
				GUI[console_value]:setBold(true)
  			GUI[console_value]:cecho("[+-+ "..section.." +-+]\n")
				resetFormat()
  			for i = 1, #Character.Inventory[section] do
    			local obj = Character.Inventory[section][i]
					local visible = true
					if obj.worn == true and GUI.InventoryHideEq == true then
						visible = false
					elseif obj.wielded == true and GUI.InventoryHideEq == true then
						visible = false
					end
					if visible == true then
    				GUI[console_value]:cecho(string.gsub(string.format("%-18s", "(&lt;cyan&gt;"..obj.quantity.."&lt;reset&gt;)"), "%$([%w_]+)", GUI.colors))
  					local commands = {
    					[[send("examine first ]]..obj.name..[[", true)]]						
    				}
  					local tooltips =  {
    					"Examine"
    				}
  					GUI[console_value]:fg(GUI.colors.item)
  					if obj.worn == true or obj.wielded == true then
  						GUI[console_value]:fg(GUI.colors.eq_item)
  						table.insert(commands, [[send("remove ]]..obj.name..[[", true)]])
  						table.insert(tooltips, "Remove")
  					end
  					if obj.kept == true then
  						GUI[console_value]:setBold(true)
          	else
  						table.insert(commands, [[send("sell a ]]..obj.name..[[", true)]])
  						table.insert(tooltips, "Sell")
  						table.insert(commands, [[send("sell all ]]..obj.name..[[", true)]])
  						table.insert(tooltips, "Sell all")
  					end
  					GUI[console_value]:setUnderline(true)	
          	GUI[console_value]:echoPopup(string.format("%s\n", obj.name), commands, tooltips, true)
          	resetFormat()
					end
  			end
			end
		end
	end
	}
}</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Create Money</name>
						<packageName></packageName>
						<script>money_sections = 
	{
		"CurrentGold",
		"CurrentExp"
	}
money_icons = 
	{
		"money-coins.png",
		"money-exp.png"
	}
money_tooltips = 
	{
		"Current Gold", 
		"Current Experience"
	}

function GUI.CreateMoney()
  GUI.HBoxMoney =
    Geyser.Container:new(
      {name = "HBoxMoney", x = 0, y = "90%", width = "50%", height = "5%"}, GUI.Right
    )

	-- Add the icons and events
	xPos = {"0%", "50%"}
  for index = 1, #money_sections do
    local section_value = money_sections[index]
    local section_icon = money_icons[index]
    local tooltip_value = money_tooltips[index]  	

		GUI[section_value.."Container"] =
    Geyser.Container:new(
      {
        name = section_value.."Container",
        message = "",
				x = xPos[index], y = 0,
				height = "100%",
    		width = "50%"
      },
      GUI.HBoxMoney
    )
		
		GUI["Box"..section_value] =
    Geyser.Label:new(
      {
        name = "Box"..section_value,
        message = "",
				x = 0, y = 0,
				height = "100%",
    		width = "30%"
      },
      GUI[section_value.."Container"]
    )
		GUI["Box"..section_value]:setStyleSheet(GUI.MoneyBoxCSS:getCSS())
		
    GUI["Box"..section_value .. "Icon"] =
    Geyser.Label:new(
      {
        name = "Box"..section_value .. "Icon",
        message = "",
				x = 0, y = 0,
				height = GUI.button_height,
    		width = GUI.button_height
      },
      GUI["Box"..section_value]
    )
  	set_icon("Box"..section_value.."Icon", "MoneyBoxCSS", section_icon, tooltip_value)
    GUI["Box"..section_value .. "Icon"]:setClickCallback("on_money_box_press", section_value)
		if not table.contains(GUI.icons, "Box"..section_value.."Icon") then
  		table.insert(GUI.icons, "Box"..section_value.."Icon")
  	end
		
		local key = string.split(section_value, "Current")[2]
		sectionObj = Character[key]
	 	GUI[section_value .. "Value"] =
   	Geyser.Label:new(
      {
        name = section_value .. "Value",
        message = string.format("&lt;b&gt;&lt;font size=\""..GUI.FontSize.."\"&gt;%12s&lt;br&gt;%-12s&lt;/font&gt;&lt;/b&gt;", format_num(sectionObj.Current, 0), key),
				x = "30%", y = "0%",
				height="100%", width="70%"
      },
      GUI[section_value.."Container"]
    )
		GUI[section_value .. "Value"]:setStyleSheet(GUI.MoneyLabelCSS:getCSS())
  end
end

function on_money_box_press()
	on_menu_box_press("BoxProgress")
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Create Status</name>
						<packageName></packageName>
						<script>status_sections =
  {
    "BoxBrave",
    "BoxPkable",
    "BoxPoisoned",
    "BoxConfused",
    "BoxHallucinating",
    "BoxDrunk"
  }
status_icons =
  {
    "chat-settings.png",
    "chat-settings.png",
    "chat-settings.png",
    "chat-settings.png",
    "chat-settings.png",
    "chat-settings.png"
  }
status_tooltips =
  {
    "Brave",
    "PK Flag",
    "Poisoned",
    "Confused",
    "Hallucinating",
    "Drunk"
  }

function on_status_box_press(section)
  for index = 1, #status_sections do
    local section_value = menu_sections[index]
		
    if section_value == section then
			GUI.CurrentStatus = section
      --GUI[console_value]:show()
    else
      --GUI[console_value]:hide()
    end
  end
end

function GUI.CreateStatus()
  -- The icons will be contained here
  GUI.HBoxStatus =
    Geyser.HBox:new(
      {name = "HBoxStatus", x = 0, y = "95%", width = "100%", height = "5%"}, GUI.Right
    )
  	
  -- Add the icons and events
  for index = 1, #status_sections do
    local section_value = status_sections[index]
    local section_icon = status_icons[index]
    local tooltip_value = status_tooltips[index]
		
    GUI[section_value] =
      Geyser.Container:new(
        {
          name = section_value,
          message = ""
        },
        GUI.HBoxStatus
      )
    
    GUI[section_value.."Icon"] =
      Geyser.Label:new(
        {
          name = section_value.."Icon",
          message = "",
					x=0, y=0,
					width=GUI.button_height, height=GUI.button_height
        },
        GUI[section_value]
      )
		set_icon(section_value.."Icon", "BoxRightCSS", section_icon, tooltip_value)
		GUI[section_value .. "Icon"]:setClickCallback("on_status_box_press", section_value)
		set_greybox(section_value, "BoxRightCSS", tooltip_value, "on_status_box_press")
  end
	   
	 GUI.BoxTooltip =
    Geyser.Container:new(
      {
        name = "BoxTooltip",
        message = "",
				h_stretch_factor = 6
      },
      GUI.HBoxStatus
    )
  GUI.TooltipLabel =
    Geyser.Label:new(
      {
        name = "TooltipLabel",
        message = "",
				x=0, y=0,
				width="100%", height="100%"
      },
      GUI.BoxTooltip
    )
		GUI.TooltipLabel:setStyleSheet(GUI.TooltipLabelCSS:getCSS())
		GUI.TooltipLabel:setOnEnter(
      "enable_tooltip",
      "&lt;b&gt;&lt;font size=\""..GUI.FontSize.."\"&gt;Displays info on the current UI element.&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;"
    )
    GUI.TooltipLabel:setOnLeave(
      "disable_tooltip",
      ""
    )
	
end</script>
						<eventHandlerList />
					</Script>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Flash Button</name>
					<packageName></packageName>
					<script>GUI.FlashTimers = GUI.FlashTimers or {}
GUI.Flashing = GUI.Flashing or {}

function flashButtonBox(name, time, delay)
	time = time or 1
	delay = delay or 1
	--setup "flashing" state
	if GUI.Flashing[name] ~= true or not GUI.Flashing[name] then
		GUI[name]:flash(time)
		GUI.Flashing[name] = true
		if GUI.FlashTimers[name] then killTimer(GUI.FlashTimers[name]) end		
		GUI.FlashTimers[name] = tempTimer(delay, [[
  		GUI["]]..name..[["]:flash(]]..time..[[)
  		GUI.Flashing["]]..name..[["] = false 
		]] )				
	end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Refresh on Resize</name>
					<packageName></packageName>
					<script>function GUI.RefreshResize()

		for index = 1, #GUI.icons do
			local icon = GUI.icons[index]
			--echo(string.format("%s, %d, %d\n", icon, GUI.button_height, GUI.button_height))
			GUI[icon]:resize(GUI.button_height, GUI.button_height)
		end
		
		for index = 1, #GUI.greys do
			local grey = GUI.greys[index]
			local boxName = string.split( grey, "Grey")[1]
			--display(boxName)
			--echo(grey.." "..boxName.."\n")			
			GUI[grey]:resize(GUI[boxName]:get_width(), GUI.button_height)
		end
		
		--[[for index = 1, #GUI.gauges do
			local gauge = GUI.gauges[index]
			local wrapper = gauge.."Wrapper"
			GUI[gauge]:resize(GUI[wrapper]:get_width(), GUI[wrapper]:get_height())
			GUI[gauge]:move(GUI[wrapper]:get_x(), GUI[wrapper]:get_y())
		end]]
		
		local boxname = ""
		for index = 1, #GUI.consoles do
			local console = GUI.consoles[index]
			if table.contains(chat_consoles, console) then
				boxname = "ChatBox"
			elseif table.contains(content_consoles, console) then
				boxname = "ContentBox"
			elseif table.contains(menu_consoles, console) then
				boxname = "MenuBox"
			end
			--seperate the types if we need it later
			if GUI[console].type == "miniConsole" then
				GUI[console]:resize(GUI[boxname]:get_width()-tonumber(string.format("%.0f", GUI.ContentBox:get_width()*0.02)), 
					GUI[boxname]:get_height()-tonumber(string.format("%.0f", GUI.ContentBox:get_width()*0.02)))
				GUI[console]:move(GUI[boxname]:get_x()+tonumber(string.format("%.0f", GUI.ContentBox:get_width()*0.02)), 
					GUI[boxname]:get_y()+tonumber(string.format("%.0f", GUI.ContentBox:get_width()*0.02)))
				GUI[console]:setFontSize(GUI.ConsoleFontSize)
			elseif GUI[console].type == "container" or GUI[console].type == "mapper" then
				GUI[console]:resize(GUI[boxname]:get_width(), GUI[boxname]:get_height())
				GUI[console]:move(GUI[boxname]:get_x(), GUI[boxname]:get_y())
			end
		end
		
		on_chat_box_press(GUI.CurrentChat)
		on_content_box_press(GUI.CurrentContent)
		on_menu_box_press(GUI.CurrentMenu)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Render Console</name>
					<packageName></packageName>
					<script>function render_console(console_value, section_table)
	--echo(console_value)
	--display(section_table)
	if section_table ~= nil then
		clearWindow(console_value)
    for index = 1, #section_table do
			section_table[index](console_value)
			--old code to replace GUI.colors, now in every section_table
			--console_string = string.gsub(section_table[index](), "%$([%w_]+)", GUI.colors).."\n"
  	end
	end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Refresh Tabs</name>
					<packageName></packageName>
					<script>--Refreshes open tabs in the Content or Menu areas (if necessary)
GUI.TabRefresh = GUI.TabRefresh or true
GUI.TabTimers = GUI.TabTimers or {}
GUI.TabTimersDelay = GUI.TabTimersDelay or 10

function killAllTabTimers()
	local keys = table.keys(GUI.TabTimers)
	for index = 1, #keys do
		local name = keys[index]
  	if GUI.TabTimers[name] then
			killTimer(GUI.TabTimers[name])
			GUI.TabTimers[name] = nil
		end
	end
end

function killTabTimer(name)
	if GUI.TabTimers[name] then
		--cecho("\n&lt;sky_blue&gt;killing tab timer: &lt;red&gt;"..name.."&lt;reset&gt;\n")
		killTimer(GUI.TabTimers[name])
		GUI.TabTimers[name] = nil	
	end
end

function startTabTimer(name, delay)
	if GUI.TabRefresh == true then
  	delay = delay or GUI.TabTimersDelay
  	if TabHandlers[name] then
  		--cecho("&lt;sky_blue&gt;starting tab refresh... "..name.."&lt;reset&gt;\n")
  		refreshTab(name, delay)
  	end
	end
end

function refreshTab(name, delay)
	--cecho("\n&lt;sky_blue&gt;updating tab...&lt;reset&gt;")
	delay = delay or GUI.TabTimersDelay
	doTabRefresh(name)
	if GUI.TabTimers[name] then killTimer(GUI.TabTimers[name]) end		
	GUI.TabTimers[name] = tempTimer(delay, [[
		--cecho("\n&lt;sky_blue&gt;timer called...&lt;reset&gt;")
		refreshTab("]]..name..[[", "]]..delay..[[")
	]] )
end

function doTabRefresh(name)
  if GUI.TabRefresh == true then
		enableTrigger("Suppress Prompt")
  	TabHandlers[name]()
	end
end

TabHandlers = TabHandlers or 
		{
			["CharacterConsole"] = function() refreshCharacter() end,
			["AbilitiesConsole"] = function() refreshAbilities() end,
			["InventoryConsole"] = function() refreshInventory() end,
					
			["ProgressContainer"] = function() refreshProgress() end,
		}

function refreshCharacter()
	if table.contains(GUI.Mute, "Character.Score") == false then table.insert(GUI.Mute, "Character.Score") end
	enableTrigger("Character.Score")
	--cecho("&lt;sky_blue&gt;updating score...&lt;reset&gt;")
	send("score", false)
	
	tempTimer( 2, function () render_console("CharacterConsole", content_body["CharacterConsole"] ) end )
end
	
function refreshAbilities()
	if table.contains(GUI.Mute, "Character.Skills") == false then table.insert(GUI.Mute, "Character.Skills") end
	if table.contains(GUI.Mute, "Character.Exp") == false then table.insert(GUI.Mute, "Character.Exp") end
	if table.contains(GUI.Mute, "Character.Spells") == false then table.insert(GUI.Mute, "Character.Spells") end
	if table.contains(GUI.Mute, "Character.Align") == false then table.insert(GUI.Mute, "Character.Align") end
	--cecho("&lt;sky_blue&gt;updating abilities...&lt;reset&gt;")
	enableTrigger("Character.Skills")
	enableTrigger("Character.Exp")
	send("do exp; skills;", false)

	enableTrigger("Character.Spells")
	enableTrigger("Character.Align")
	send("do align; spells;", false)
	
	tempTimer( 2, function () render_console("AbilitiesConsole", menu_body["AbilitiesConsole"] ) end )
end

function refreshInventory()
	if table.contains(GUI.Mute, "Character.Inventory") == false then table.insert(GUI.Mute, "Character.Inventory") end
	--cecho("&lt;sky_blue&gt;updating inventory...&lt;reset&gt;")
	send("i", false)
	
	tempTimer( 2, function () render_console("InventoryConsole", menu_body["InventoryConsole"] ) end )
end

function refreshParty()
	--if table.contains(GUI.Mute, "Character.Abilities") == false then table.insert(GUI.Mute, "Character.Abilities") end
	--cecho("&lt;sky_blue&gt;updating party...&lt;reset&gt;")
	--send("do skills; spells;")
end

function refreshProgress()
	if table.contains(GUI.Mute, "Character.Score") == false then table.insert(GUI.Mute, "Character.Score") end
	--cecho("&lt;sky_blue&gt;updating progress...&lt;reset&gt;")
	enableTrigger("Character.Score")
	send("score", false)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>initGUI()</name>
					<packageName></packageName>
					<script>function initGUI()
	-- Container used to get console position
  GUI.mainconsole_container = Geyser.Container:new({
  	name = "mainconsole_container",
  	x="0", y="10%",
  	width="60%", height="80%",
  })
	
	GUI.window_width = -1
	GUI.window_height = -1
	
	GUI.UpdateBorderSizes()
	GUI.CreateBackground()
	GUI.CreateHeader()
	GUI.CreateFooter()
	GUI.CreateRight()
		GUI.CreateChat()
		GUI.CreateContent()
		GUI.CreateMoney()
		GUI.CreateMenu()
		GUI.CreateStatus()
	GUI.Initialized = true		
	tempTimer(
      1,
      function()
			--mapper
      GUI.MapperConsole = GUI.MapperConsole or Geyser.Mapper:new(
          {name = "MapperConsole", 
					x = GUI.ContentBox:get_x(),
            x = GUI.ContentBox:get_x(),
            y = GUI.ContentBox:get_y(),
            height = GUI.ContentBox:get_height(),
            width = GUI.ContentBox:get_width()
					}
        )
			--GUI.MapperConsole:raise()
			GUI.MapperConsole:hide()

			--call updates on all refreshable sections
			on_menu_box_press("BoxProgress")
			on_chat_box_press("BoxChatAll")
	    on_content_box_press("BoxCharacter")	
      end
    )
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Chat</name>
				<packageName></packageName>
				<script>GUI.CustomChannels = GUI.CustomChannels or {
		"RDMP"
}

GUI.Channels = GUI.Channels or {
  "abjurer",
  "admin",
  "alien",
  "arch",
  "archinfo",
  "arena",
  "auction",
  "auction2",
  "bard",
  "bounty",
  "build",
  "castles",
  "cebinfo",
  "chat",
  "clans",
  "death",
  "death_taunt",
  "debug",
  "druid",
  "elemental",
  "equip",
  "error",
  "event",
  "evoker",
  "fishing",
  "geek",
  "ghost",
  "inform",
  "iomchat",
  "login",
  "lurker",
  "martial_artist",
  "mdeath",
  "monitor",
  "mud_issues",
  "mudclients",
  "myth",
  "necromancer",
  "newbie",
  "obscene",
  "paladin",
  "parties",
  "plaque",
  "rep",
  "sales",
  "shapeshifter",
  "southcape",
  "summoner",
  "unraveller",
  "warrior",
  "weaver",
  "witch",
  "wiz",
  "wizinfo",
  "woodsman",
  "zombie"
}</script>
				<eventHandlerList />
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Event Handlers</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>sysWindowResizeEvent</name>
					<packageName></packageName>
					<script>-- function called by the temptimer to do the work
function GUI.handleWindowResize()
 	if (GUI.window_width == nil or GUI.window_height == nil) or (GUI.window_width ~= x or GUI.window_height ~= y) then
		if GUI.UpdateBorderSizes() then
			GUI.RefreshResize()
		end
	end
end

-- sysWindowResizeEvent handler
function GUI.updatecontent( event, x, y )
	if( GUI.eventtimer ) then killTimer( GUI.eventtimer ) end
	GUI.eventtimer = tempTimer(0.1, [[killTimer( "GUI.eventtimer" ) GUI.handleWindowResize()]])
end

-- register our function as an event handler
registerAnonymousEventHandler("sysWindowResizeEvent", "GUI.updatecontent")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>sysDisconnectionEvent</name>
					<packageName></packageName>
					<script>function GUI.disconnected()
	killAllTabTimers()
	-- other stuff --
	
end



-- register our function as an event handler
registerAnonymousEventHandler("sysDisconnectionEvent", "GUI.disconnected")</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Character</name>
			<packageName></packageName>
			<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
			<eventHandlerList />
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Combat</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Party</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
			</ScriptGroup>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Nav</name>
			<packageName></packageName>
			<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>Mapping Helper by JorMox</name>
				<packageName></packageName>
				<script>mapAddOns = mapAddOns or {}

local function safeDelete(ids)
    for _, id in ipairs(ids) do
        id = tonumber(id)
        local rooms = {}
        for _, room in ipairs(getAllRoomEntrances(id)) do
            for dir, exit in pairs(getRoomExits(room)) do
                if exit == id then
                    if rooms[room] then
                        if type(rooms[room]) == "table" then
                            table.insert(rooms[room],dir)
                        else
                            rooms[room] = {rooms[room], dir}
                        end
                    else
                        rooms[room] = dir
                    end
                end
            end
        end
        deleteRoom(id)
        for rid, dirs in pairs(rooms) do
            if type(dirs) == "table" then
                for _, dir in ipairs(dirs) do
                    setExitStub(rid, dir, true)
                end
            else
                setExitStub(rid, dirs, true)
            end
        end
    end
    updateMap()
end

local keys = {['1'] = 'sw', ['2'] = 's', ['3'] = 'se', ['4'] = 'w', ['5'] = 'done', ['6'] = 'e', ['7'] = 'nw',
    ['8'] = 'n', ['9'] = 'ne', ['Plus'] = 'd', ['Minus'] = 'u'}
mapAddOns.keysEnabled = false
mapAddOns.keyIds = mapAddOns.keyIds or {}
mapAddOns.roomIds = mapAddOns.roomIds or {}

local function toggleMapKeys()
    mapAddOns.keysEnabled = not mapAddOns.keysEnabled
    if mapAddOns.keysEnabled then
        for key, val in pairs(keys) do
            table.insert(mapAddOns.keyIds, tempKey(mudlet.keymodifier.Keypad, mudlet.key[key],
                string.format("raiseEvent('tempMapKey','%s')",val)))
        end
    else
        for _,id in ipairs(mapAddOns.keyIds) do
            killKey(id)
        end
        mapAddOns.keyIds = {}
    end
end

local coordmap = {
    n = {0,1,0},    ne = {1,1,0},   nw = {-1,1,0},  e = {1,0,0},    w = {-1,0,0},
    s = {0,-1,0},   se = {1,-1,0},  sw = {-1,-1,0}, u = {0,0,1},    d = {0,0,-1},
}

local function shiftRooms(dir)
    local dx,dy,dz = unpack(coordmap[dir])
    for _,id in ipairs(mapAddOns.roomIds) do
        local x,y,z = getRoomCoordinates(id)
        setRoomCoordinates(id,x+dx,y+dy,z+dz)
    end
    updateMap()
end

function mapAddOns.eventHandler(event, mapEvent, ...)
    if event == "mapAddOnEvent" then
        if mapEvent == "safeDelete" then
            safeDelete(arg)
        elseif mapEvent == "shiftRooms" then
            mapAddOns.roomIds = arg
            toggleMapKeys()
            cecho("\n&lt;green&gt;Please use the keypad keys to shift the selected rooms around.&lt;reset&gt;")
        elseif mapEvent == "teleportHere" then
            if arg.n == 1 then
                centerview(arg[1])
            else
                cecho("\n&lt;red&gt;Cannot teleport to multiple rooms at once.&lt;reset&gt;")
            end
        end
    elseif event == "tempMapKey" and mapAddOns.keysEnabled then
        if mapEvent == "done" then
            toggleMapKeys()
            mapAddOns.roomIds = {}
            cecho("\n&lt;green&gt;Room shifting completed.&lt;reset&gt;")
        else
            shiftRooms(mapEvent)
        end
    elseif event == "mapOpenEvent" then
        local events = {safeDelete = "safe delete", shiftRooms = "shift rooms", teleportHere = "teleport here"}
        local mapEvents = getMapEvents()
        for event, name in pairs(events) do
            if not mapEvents[event] then
                addMapEvent(event, "mapAddOnEvent","",name)
            end
        end
    end
end

registerAnonymousEventHandler("mapAddOnEvent","mapAddOns.eventHandler")
registerAnonymousEventHandler("tempMapKey","mapAddOns.eventHandler")
registerAnonymousEventHandler("mapOpenEvent","mapAddOns.eventHandler")</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Party</name>
			<packageName></packageName>
			<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
			<eventHandlerList />
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>RDMP</name>
			<packageName></packageName>
			<script>-- RED DRAGON MUD PROTOCOL --</script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>doRDMP</name>
				<packageName></packageName>
				<script>RDMP.handlers = 
		{
			HEALTH = function() doRDMP_Health() end,
			PARTY_HEALTH = function() doRDMP_PHealth() end,
			MONSTER_HEALTH = function() doRDMP_MHealth() end,
			TARGET_DEATH = function() doRDMP_TDeath() end,
			MONSTER_DEATH = function() doRDMP_MDeath() end,
			default = function() doRDMP_Default() end
		}

function doRDMP(data)
	RDMP.line = data
	RDMP.args = data:split(" ")
	switch(RDMP.args[2], RDMP.handlers)()
end

function doRDMP_Default()
	display(RDMP.args)
end

function doRDMP_Health()
	--display(RDMP.args)
	Character["Hp"] = {Current = tonumber(RDMP.args[3]), Max = tonumber(RDMP.args[4])}
	Character["Sp"] = {Current = tonumber(RDMP.args[5]), Max = tonumber(RDMP.args[6])}
	Character["Ep"] = {Current = tonumber(RDMP.args[7]), Max = tonumber(RDMP.args[8])}
	Character["Hunger"] = tonumber(RDMP.args[9])
	update_statusbars()
end

function doRDMP_PHealth()
	--display(RDMP.args)
	stringArray = {}
	for i=3,#RDMP.args do	
    table.insert(stringArray, RDMP.args[i])
  end
	string = table.concat(stringArray, " ")
	selectCurrentLine()
	copy()
	appendBuffer("ChatPartyStatusConsole")
end

function doRDMP_MHealth()
	--display(RDMP.args)
	
	if #RDMP.args == 4 then
		enemyName = RDMP.args[3]
		Character.Enemy = enemyName
	elseif #RDMP.args &gt; 4 then
		enemyName = {}
		for i=3,#RDMP.args-1 do	
    	table.insert(enemyName, RDMP.args[i])
  	end
		Character.Enemy = table.concat(enemyName, " ")
	end
	enemyHp = RDMP.args[#RDMP.args]
	Character.EHp = tonumber(enemyHp)
	GUI.EHpBar:setValue(Character.EHp)
	GUI.EHpBarLabel:echo("&lt;b&gt;"..Character.Enemy.." ("..Character.EHp.."%)&lt;/b&gt;")
end

function doRDMP_TDeath()
	Character.Enemy = "No Enemy"
	Character.EHp = 0
	GUI.EHpBar:setValue(Character.EHp)
	GUI.EHpBarLabel:echo("&lt;b&gt;"..Character.Enemy.." ("..Character.EHp.."%)&lt;/b&gt;")
end

function doRDMP_MDeath()
	--[[stringArray = {}
	for i=3,#RDMP.args do	
    table.insert(stringArray, RDMP.args[i])
  end
	string = table.concat(stringArray, " ")
	send("p' "..string)]]
end</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Skills</name>
			<packageName></packageName>
			<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>Skill Aliases</name>
				<packageName></packageName>
				<script>function skillAlias(alias)
	--echo(alias.."\n")
	local name = Character.Aliases.Skills[alias]
	if name == nil or name == "" then name = alias end
	return name
end

Character.Aliases.Skills = GUI.Aliases.Skills or {
	["sb"] = "spirit blessing",
	["wood"] = "scavenge wood",
	["fire"] = "fire building",
	["campfire"] = "build campfire",
	["hunt"] = "hunting"
}

GUI.Commands.Skills = GUI.Commands.Skills or {
	["spirit blessing"] = {[1]="Ally"},
	["scavenge wood"] = {},
	["fire building"] = {},
	["hunting"] = {},
	
}</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Use Skill</name>
				<packageName></packageName>
				<script>function useSkill(name, userArgs) 
  if name then
		if userArgs == nil then
			userArgs = {}
		end
		local args = GUI.Commands.Skills[name]
		if not args then args = {} end
		--display(args)
		cmd = "use "..name
		
		if #args &gt; 0 then	
			cmd = cmd.." on "..Character.Selector
		end
		for index = 1, #args do
			if userArgs[index] then
				cmd = cmd.." "..userArgs[index]
			else
				local t = args[index]
				if t == "Enemy" and (Character.Enemy == "" or Character.Enemy == "No Enemy") then
					t = "Target"
				elseif t == "Ally" and (Character.Ally == nil or Character.Ally == "") then
					t = "Name"
				end 
				if Character[t] then cmd = cmd.." "..Character[t] end
			end
		end
		Character.ActiveSkill = name
		Character.ActiveSpell = ""
		send(cmd)
	end
end</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Spells</name>
			<packageName></packageName>
			<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>Spell Aliases</name>
				<packageName></packageName>
				<script>function spellAlias(alias)
	--echo(alias.."\n")
	local name = Character.Aliases.Spells[alias]
	if name == nil or name == "" then name = alias end
	return name
end

Character.Aliases.Spells = GUI.Aliases.Spells or {
	["sw"] = "spirit wind",
	["grow"] = "magical growth"
}

GUI.Commands.Spells = GUI.Commands.Spells or {
	["spirit wind"] = {[1]="Enemy"},
	["magical growth"] = {[1]="Ally"}
}</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Cast Spell</name>
				<packageName></packageName>
				<script>function castSpell(name, userArgs) 
  if name then
		if userArgs == nil then
			userArgs = {}
		end
		local args = GUI.Commands.Spells[name]
		if not args then args = {} end
		--display(args)
		cmd = "cast "..name
		
		if #args &gt; 0 then	
			cmd = cmd.." on "..Character.Selector
		end
		for index = 1, #args do
			if userArgs[index] then
				cmd = cmd.." "..userArgs[index]
			else
				local t = args[index]
				if t == "Enemy" and (Character.Enemy == "" or Character.Enemy == "No Enemy") then
					t = "Target"
				elseif t == "Ally" and (Character.Ally == nil or Character.Ally == "") then
					t = "Name"
				end 
				if Character[t] then cmd = cmd.." "..Character[t] end
			end
		end
		Character.ActiveSkill = ""
		Character.ActiveSpell = name
		send(cmd)
	end
end</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Hotkeys</name>
			<packageName></packageName>
			<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>doHotkey</name>
				<packageName></packageName>
				<script>Hotkeys = Hotkeys or {
	[1] = {1, "sw", {}},
	[2] = {2, "sb", {"myself"}},
	[3] = {3, "dance", {}},
	
}

HotKey0 = {3, "cast stop", {}}

function doHotkey(index)
	echo("Hotkey "..index)
  if index == 0 then
  	local func = Hotkey0[1]
  	local cmd = Hotkey0[2]
  	local args = Hotkey0[3]
		hotkey_functions[func](cmd, args)
  else
  	local func = Hotkeys[index][1]
  	local cmd = Hotkeys[index][2]
  	local args = Hotkeys[index][3]
		hotkey_functions[func](cmd, args)
	end
end

hotkey_functions={
	[1] = function(cmd, args) castSpell(spellAlias(cmd), args) end,
	[2] = function(cmd, args) useSkill(skillAlias(cmd), args) end,
	[3] = function(cmd, args) send(cmd) end,

}</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage>
		<KeyGroup isActive="no" isFolder="yes">
			<name>Combat</name>
			<packageName></packageName>
			<script></script>
			<command></command>
			<keyCode>-1</keyCode>
			<keyModifier>-1</keyModifier>
		</KeyGroup>
		<KeyGroup isActive="yes" isFolder="yes">
			<name>Nav</name>
			<packageName></packageName>
			<script></script>
			<command></command>
			<keyCode>16777220</keyCode>
			<keyModifier>0</keyModifier>
			<Key isActive="yes" isFolder="no">
				<name>North</name>
				<packageName></packageName>
				<script></script>
				<command>n</command>
				<keyCode>16777235</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>NE</name>
				<packageName></packageName>
				<script></script>
				<command>ne</command>
				<keyCode>16777238</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>East</name>
				<packageName></packageName>
				<script></script>
				<command>e</command>
				<keyCode>16777236</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>SE</name>
				<packageName></packageName>
				<script></script>
				<command>se</command>
				<keyCode>16777239</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>South</name>
				<packageName></packageName>
				<script></script>
				<command>s</command>
				<keyCode>16777237</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>SW</name>
				<packageName></packageName>
				<script></script>
				<command>sw</command>
				<keyCode>16777233</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>West</name>
				<packageName></packageName>
				<script></script>
				<command>w</command>
				<keyCode>16777234</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>NW</name>
				<packageName></packageName>
				<script></script>
				<command>nw</command>
				<keyCode>16777232</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>Up</name>
				<packageName></packageName>
				<script></script>
				<command>up</command>
				<keyCode>43</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>Down</name>
				<packageName></packageName>
				<script></script>
				<command>down</command>
				<keyCode>45</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>Look</name>
				<packageName></packageName>
				<script></script>
				<command>look</command>
				<keyCode>16777227</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>map</name>
				<packageName></packageName>
				<script></script>
				<command>map</command>
				<keyCode>16777222</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>Search</name>
				<packageName></packageName>
				<script></script>
				<command>search</command>
				<keyCode>16777223</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
		</KeyGroup>
		<KeyGroup isActive="no" isFolder="yes">
			<name>Skills</name>
			<packageName></packageName>
			<script></script>
			<command></command>
			<keyCode>-1</keyCode>
			<keyModifier>-1</keyModifier>
		</KeyGroup>
		<KeyGroup isActive="no" isFolder="yes">
			<name>Spells</name>
			<packageName></packageName>
			<script></script>
			<command></command>
			<keyCode>-1</keyCode>
			<keyModifier>-1</keyModifier>
		</KeyGroup>
		<KeyGroup isActive="yes" isFolder="yes">
			<name>Hotkeys</name>
			<packageName></packageName>
			<script>-- Ctrl+[1-0], and Ctrl+Shift+[1-5]</script>
			<command></command>
			<keyCode>-1</keyCode>
			<keyModifier>-1</keyModifier>
			<Key isActive="yes" isFolder="no">
				<name>Alt+`</name>
				<packageName></packageName>
				<script></script>
				<command>cast stop</command>
				<keyCode>96</keyCode>
				<keyModifier>134217728</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>Alt+1</name>
				<packageName></packageName>
				<script>echo("test")
doHotkey(1)</script>
				<command></command>
				<keyCode>49</keyCode>
				<keyModifier>134217728</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>Alt+2</name>
				<packageName></packageName>
				<script>doHotkey(2)</script>
				<command></command>
				<keyCode>50</keyCode>
				<keyModifier>134217728</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>Alt+3</name>
				<packageName></packageName>
				<script>doHotkey(3)</script>
				<command></command>
				<keyCode>51</keyCode>
				<keyModifier>134217728</keyModifier>
			</Key>
			<Key isActive="no" isFolder="no">
				<name>Alt+4</name>
				<packageName></packageName>
				<script>doHotkey(4)</script>
				<command></command>
				<keyCode>52</keyCode>
				<keyModifier>134217728</keyModifier>
			</Key>
			<Key isActive="no" isFolder="no">
				<name>Alt+5</name>
				<packageName></packageName>
				<script>doHotkey(5)</script>
				<command></command>
				<keyCode>53</keyCode>
				<keyModifier>134217728</keyModifier>
			</Key>
			<Key isActive="no" isFolder="no">
				<name>Alt+6</name>
				<packageName></packageName>
				<script>doHotkey(6)</script>
				<command></command>
				<keyCode>54</keyCode>
				<keyModifier>134217728</keyModifier>
			</Key>
			<Key isActive="no" isFolder="no">
				<name>Alt+7</name>
				<packageName></packageName>
				<script>doHotkey(7)</script>
				<command></command>
				<keyCode>55</keyCode>
				<keyModifier>134217728</keyModifier>
			</Key>
			<Key isActive="no" isFolder="no">
				<name>Alt+8</name>
				<packageName></packageName>
				<script>doHotkey(8)</script>
				<command></command>
				<keyCode>56</keyCode>
				<keyModifier>134217728</keyModifier>
			</Key>
			<Key isActive="no" isFolder="no">
				<name>Alt+9</name>
				<packageName></packageName>
				<script>doHotkey(9)</script>
				<command></command>
				<keyCode>57</keyCode>
				<keyModifier>134217728</keyModifier>
			</Key>
			<Key isActive="no" isFolder="no">
				<name>Alt+10</name>
				<packageName></packageName>
				<script>doHotkey(10)</script>
				<command></command>
				<keyCode>48</keyCode>
				<keyModifier>134217728</keyModifier>
			</Key>
		</KeyGroup>
	</KeyPackage>
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
